{"version":3,"sources":["pages/public/Login.js"],"names":["Login","componentDidMount","init","updateSystemData","props","SYSTEM_DATA_PAGE_TITLE","_openPage","url","history","push","submit","e","preventDefault","email","password","updateUIConstraints","login","loading","requestBody","user_password","Helper","validate","Object","keys","then","status","response","LOGIN_ERRORS","length","catch","err","console","log","isError","key","errors","findIndex","ele","fieldName","message","onChangeText","value","updateFormData","componentDidUpdate","prevProps","reqeustStatus","prevReqeustStatus","navigation","STATUS","SUCCESS","ERROR","MESSAGE","ToastsStore","error","_handleErrorMessage","data","className","componentWillUnmount","resetLoginData","resetLoginState","this","store","lightBackground","position","ToastsContainerPosition","TOP_RIGHT","id","style","backgroundImage","href","src","onSubmit","bind","type","placeholder","name","onChange","LOGIN_FORM_EMAIL","target","autoComplete","LOGIN_FORM_PASSWORD","onClick","PureComponent","connect","state","login_data","LOGIN_KEY","undefined","formData","LOGIN_FORM","LOGIN_REQEUST_LOADING","LOGIN_REQUEST_STATUS"],"mappings":"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","file":"static/js/17.60fb5b04.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { LOGIN_KEY, LOGIN_FORM, LOGIN_FORM_EMAIL, LOGIN_FORM_PASSWORD, LOGIN_ERRORS, SUCCESS, ERROR, STATUS, LOGIN_REQEUST_LOADING, LOGIN_REQUEST_STATUS, MESSAGE, SYSTEM_DATA_PAGE_TITLE } from '../../redux/Types';\nimport { Helper } from '../../apis'\nimport { updateFormData, updateUIConstraints, login, resetLoginState } from '../../redux/login/Action';\nimport Utils from '../../components/util/Utils';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport { updateSystemData } from '../../redux/system/Action';\n\nclass Login extends PureComponent {\n    static propTypes = {\n\n    }\n\n    componentDidMount = () => {\n        this.init();\n    }\n\n    init = () => {\n        const { updateSystemData } = this.props;\n\n        updateSystemData({\n            [SYSTEM_DATA_PAGE_TITLE]: \"Refill | Login\"\n        });\n    }\n\n    _openPage = (url) => {\n        const { history } = this.props;\n\n        if (!url) return;\n\n        history.push(url);\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n\n        const { email, password, updateUIConstraints, login, loading } = this.props;\n        if (loading) return;\n\n        const requestBody = { email, user_password: password };\n\n        Helper.validate(Object.keys(requestBody), requestBody)\n            .then(({ status, response }) => {\n                if (status) {\n                    updateUIConstraints({\n                        [LOGIN_ERRORS]: []\n                    });\n\n                    login();\n                } else updateUIConstraints({\n                    [LOGIN_ERRORS]: response && response.length ? response : []\n                });\n            }).catch(err => console.log(err));\n    }\n\n    /** On error */\n    isError = (key) => {\n        const { errors } = this.props;\n\n        if (errors && errors.length) {\n            return errors.findIndex(ele => (ele.fieldName === key)) > -1 ? { status: true, message: errors[errors.findIndex(ele => (ele.fieldName === key))].message } : { status: false, message: \"\" };\n        } else return { status: false, message: \"\" }\n    }\n\n    onChangeText = (key, value) => {\n        const { updateFormData } = this.props;\n\n        updateFormData({\n            [key]: value\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { reqeustStatus, loading, navigation } = this.props;\n\n        const prevReqeustStatus = prevProps && prevProps.reqeustStatus ? prevProps.reqeustStatus : {};\n        if (reqeustStatus[STATUS] !== prevReqeustStatus[STATUS]) {\n            switch (reqeustStatus[STATUS]) {\n                case SUCCESS:\n\n                    break;\n                case ERROR:\n                    const status = reqeustStatus[MESSAGE] && reqeustStatus[MESSAGE].status ? reqeustStatus[MESSAGE].status : 500;\n                    switch (status) {\n                        case 401:\n                            ToastsStore.error(\"Either email or password is incorrect\");\n                            break;\n                        default:\n                            ToastsStore.error(\"Internal server error\");\n                    }\n                    break;\n            }\n        }\n    }\n\n    _handleErrorMessage = (key) => {\n        const data = this.isError(key);\n\n        if (data && data.status) return <p className=\"text-right text-error\">{data.message}</p>;\n\n        return <div />\n    }\n\n    componentWillUnmount = () => {\n        this.resetLoginData();\n    }\n\n    resetLoginData = () => {\n        const { resetLoginState } = this.props;\n\n        resetLoginState();\n    }\n\n    render() {\n        const { email, password, loading } = this.props;\n\n        return (\n            <div className=\"kt-page-content-white kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--fixed kt-page--loading\">\n                <ToastsContainer store={ToastsStore} lightBackground position={ToastsContainerPosition.TOP_RIGHT} />\n\n                {/* begin:: Page */}\n                <div className=\"kt-grid kt-grid--ver kt-grid--root kt-page height-100\">\n                    <div className=\"kt-grid kt-grid--hor kt-grid--root  kt-login kt-login--v3 kt-login--signin\" id=\"kt_login\">\n                        <div className=\"kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor\" style={{ backgroundImage: 'url(assets/media//bg/bg-3.jpg)' }}>\n                            <div className=\"kt-grid__item kt-grid__item--fluid kt-login__wrapper\">\n                                <div className=\"kt-login__container\">\n                                    <div className=\"kt-login__logo\">\n                                        <a href=\"#\">\n                                            <img src=\"/small-logo.png\" />\n                                        </a>\n                                    </div>\n                                    <div className=\"kt-login__signin\">\n                                        <div className=\"kt-login__head\">\n                                            <h3 className=\"kt-login__title\">Sign In To Admin</h3>\n                                        </div>\n                                        <form className=\"kt-form\" onSubmit={this.submit.bind(this)}>\n                                            <div className=\"input-group\">\n                                                <input className=\"form-control\" type=\"text\" placeholder=\"Email\" name=\"email\" onChange={(e) => this.onChangeText(LOGIN_FORM_EMAIL, e.target.value)} autoComplete=\"off\" value={email} />\n                                            </div>\n                                            {/* display error */}\n                                            {this._handleErrorMessage(\"email\")}\n                                            <div className=\"input-group\">\n                                                <input className=\"form-control\" type=\"password\" placeholder=\"Password\" onChange={(e) => this.onChangeText(LOGIN_FORM_PASSWORD, e.target.value)} name=\"password\" value={password} />\n                                            </div>\n                                            {/* display error */}\n                                            {this._handleErrorMessage(\"user_password\")}\n                                            <div className=\"row kt-login__extra\">\n                                                <div className=\"col kt-align-right\">\n                                                    <a id=\"kt_login_forgot\" className=\"kt-login__link refill-cursor\" onClick={this._openPage.bind(this, '/forgot_password')}>Forget Password ?</a>\n                                                </div>\n                                            </div>\n                                            <div className=\"kt-login__actions\">\n                                                <button type=\"submit\" id=\"kt_login_signin_submit\" className=\"btn btn-brand btn-elevate kt-login__btn-primary\">{loading ? \"Loading...\" : \"Sign In\"}</button>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* end:: Page */}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = (state) => {\n    const { login } = state;\n    const login_data = login && login[LOGIN_KEY] ? login[LOGIN_KEY] : undefined;\n    const formData = login_data && login_data[LOGIN_FORM] ? login_data[LOGIN_FORM] : undefined;\n    const email = formData && formData[LOGIN_FORM_EMAIL] ? formData[LOGIN_FORM_EMAIL] : undefined;\n    const password = formData && formData[LOGIN_FORM_PASSWORD] ? formData[LOGIN_FORM_PASSWORD] : undefined;\n    const errors = login_data && login_data[LOGIN_ERRORS] ? login_data[LOGIN_ERRORS] : [];\n    const loading = login_data && login_data[LOGIN_REQEUST_LOADING] ? login_data[LOGIN_REQEUST_LOADING] : false;\n    const reqeustStatus = login_data && login_data[LOGIN_REQUEST_STATUS] ? login_data[LOGIN_REQUEST_STATUS] : {};\n\n    return ({\n        email,\n        password,\n        errors,\n        loading,\n        reqeustStatus\n    });\n}\n\nexport default connect(mapToProps, {\n    updateFormData,\n    updateUIConstraints,\n    login,\n    updateSystemData,\n    resetLoginState\n})(Login);"],"sourceRoot":""}