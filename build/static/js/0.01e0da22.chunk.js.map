{"version":3,"sources":["redux/product/Action.js","components/dashboard/product/SelectCalendar.js","components/dashboard/product/SelectCategory.js","components/dashboard/product/UploadImageContainer.js","components/dashboard/product/UploadImage.js","components/dashboard/product/SelectUploadFile.js","components/dashboard/product/Table.js","components/dashboard/product/EditUploadImageContainer.js","components/dashboard/product/EditUploadImage.js","components/dashboard/product/EditSelectUploadFile.js","components/dashboard/product/index.js"],"names":["createProduct","obj","dispatch","getState","formData","PRODUCT_ROOT","PRODUCT_KEY","ADD_PRODUCT_FORM","data","USER_ROOT","USER_KEY","user_token","USER_DATA","undefined","updateProductUIConstraints","ADD_PRODUCT_REQUEST_STATUS","STATUS","EMPTY","MESSAGE","message","TOKEN_NOT_FOUND","ADD_PRODUCT_REQEUST_LOADING","body","name","ADD_PRODUCT_FORM_NAME","short_description","ADD_PRODUCT_FORM_SHORT_DESCRIPTION","long_description","ADD_PRODUCT_FORM_LONG_DESCRIPTION","images","ADD_PRODUCT_FORM_UPLOADED_IMAGES","manufacture_at","ADD_PRODUCT_FORM_MFG_DATE","brand","ADD_PRODUCT_FORM_BRAND","distributor","ADD_PRODUCT_FORM_DISTRIBUTOR","delivery_time_in_days","parseFloat","ADD_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS","retail_price","ADD_PRODUCT_FORM_RETAIL_PRICE","refill_price","ADD_PRODUCT_FORM_REFILL_PRICE","notes","ADD_PRODUCT_FORM_NOTES","discount","ADD_PRODUCT_FORM_DISCOUNT","alerts","ADD_PRODUCT_FORM_ALERT","size","ADD_PRODUCT_FORM_SIZE","code","ADD_PRODUCT_FORM_CODE","weight","ADD_PRODUCT_FORM_WEIGHT","unit","ADD_PRODUCT_FORM_UNITS","expiry_at","ADD_PRODUCT_FORM_EXPIRY_DATE","pupc_gtin_code","ADD_PRODUCT_FORM_PUP_GTIN_CODE","category_id","ADD_PRODUCT_FORM_CATEGORY_ID","sub_category_id","ADD_PRODUCT_FORM_SUB_CATEGORY_ID","average_life_in_days","ADD_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS","EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS","quantity","ADD_PRODUCT_FORM_QUANTITY","console","log","refillAddProduct","then","res","a","Utils","status","SUCCESS","ERROR","catch","error","editProduct","EDIT_PRODUCT_FORM","EDIT_PRODUCT_REQUEST_STATUS","EDIT_PRODUCT_REQEUST_LOADING","product_id","EDIT_PRODUCT_FORM_PRODUCT_ID","EDIT_PRODUCT_FORM_NAME","EDIT_PRODUCT_FORM_SHORT_DESCRIPTION","EDIT_PRODUCT_FORM_LONG_DESCRIPTION","EDIT_PRODUCT_FORM_UPLOADED_IMAGES","EDIT_PRODUCT_FORM_MFG_DATE","EDIT_PRODUCT_FORM_BRAND","EDIT_PRODUCT_FORM_DISTRIBUTOR","EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS","EDIT_PRODUCT_FORM_RETAIL_PRICE","EDIT_PRODUCT_FORM_REFILL_PRICE","EDIT_PRODUCT_FORM_NOTES","EDIT_PRODUCT_FORM_DISCOUNT","EDIT_PRODUCT_FORM_ALERT","EDIT_PRODUCT_FORM_SIZE","EDIT_PRODUCT_FORM_CODE","EDIT_PRODUCT_FORM_WEIGHT","EDIT_PRODUCT_FORM_UNITS","EDIT_PRODUCT_FORM_EXPIRY_DATE","EDIT_PRODUCT_FORM_PUP_GTIN_CODE","EDIT_PRODUCT_FORM_CATEGORY_ID","EDIT_PRODUCT_FORM_SUB_CATEGORY_ID","EDIT_PRODUCT_FORM_QUANTITY","refillEditProduct","deleteProduct","id","DELETE_PRODUCT_REQUEST_STATUS","DELETE_PRODUCT_REQEUST_LOADING","refillDeleteProduct","getProductViaID","EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING","refillGetProductViaId","EDIT_PRODUCT_IMAGES","length","map","ele","index","image","uploaded","updateEditProductFormData","shortDescription","longDescription","manufactureAt","deliveryTimeInDays","retailPrice","refillPrice","expiryAt","pupcGtinCode","categoryId","subCategoryId","averageLifeInDays","updateAddProductFormData","Object","assign","updateProductState","updateDeleteProductFormData","DELETE_PRODUCT_FORM","type","PRODUCT_UPDATE","payload","resetProductState","PRODUCT_RESET","SelectCalendar","componentDidMount","arrows","props","_id","value","handleOnChange","calendarOptions","window","KTUtil","isRTL","leftArrow","rightArrow","$","datepicker","templates","on","e","Date","date","getTime","moment","format","componentDidUpdate","prevProps","this","placeholder","className","readOnly","PureComponent","defaultProps","SelectCategory","init","getCategoryData","state","refillGetCategoryViaId","SERVER_SUCCESS","setState","err","initSelectUI","handleOnChangeCategory","that","select2","allowClear","ajax","url","getCategoriesWithSearch","delay","headers","getAuthoriztionToken","params","search","term","page","page_size","processResults","results","items","pagination","more","hasMore","cache","escapeMarkup","markup","minimumInputLength","templateResult","repo","loading","text","templateSelection","resetCategorySelect","val","trigger","addProductReqeustStatus","prevAddProductReqeustStatus","error_label","label","connect","user","product","user_data","product_data","CATEGORY_KEY","UploadImageContainer","addImage","document","getElementById","click","onChangeFile","_images","push","target","files","ADD_PRODUCT_IMAGES","bind","key","UploadImage","isCancel","uploading","is_success","is_error","encodeImageFile","submit","uploadedImages","image_uploading_count","refillProductUploadFile","location","ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT","_handleCancel","findIndex","splice","image_uploading","file","reader","FileReader","onloadend","result","readAsDataURL","style","backgroundImage","color","backgroundColor","paddingLeft","paddingRight","onClick","display","data-toggle","title","data-original-title","ADD_PRODUCT_IS_UPLOADING_IMAGES","uploadedImagesLength","SelectUploadFile","uploading_image","hidden","accept","onChange","src","height","Table","table_id","exportCSVFileData","exportProductLoading","aria-haspopup","aria-expanded","EditUploadImageContainer","EditUploadImage","EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT","EDIT_PRODUCT_IS_UPLOADING_IMAGES","EditSelectUploadFile"],"mappings":"mcAKaA,EAAgB,SAACC,GAC1B,OAAO,SAACC,EAAUC,GACd,IAAK,IAAD,IAQiB,IANXC,EADcD,IAAWE,MAAcC,MAChBC,KAGvBC,EAAOL,IAAWM,MAAWC,MAC7BC,EAAaH,GAAQA,EAAKI,OAAcJ,EAAKI,MAAWD,WAAaH,EAAKI,MAAWD,gBAAaE,EAExG,IAAKF,EAUD,YATAT,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAASC,MAFiB,cAG1BC,KAAU,CACPC,QAASC,OAJc,kBAO9BC,KAA8B,GAPA,KAavCnB,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAASC,MAFiB,cAG1BC,KAAU,IAHgB,kBAK9BG,KAA8B,GALA,KAQnC,IAAMC,EAAO,CACTX,aACAY,KAAMnB,EAASoB,KACfC,kBAAmBrB,EAASsB,KAC5BC,iBAAkBvB,EAASwB,KAC3BC,OAAQzB,EAAS0B,KACjBC,eAAgB3B,EAAS4B,KACzBC,MAAO7B,EAAS8B,KAChBC,YAAa/B,EAASgC,KACtBC,sBAAuBC,WAAWlC,EAASmC,MAA2CD,WAAWlC,EAASmC,MAA2CnC,EAASmC,KAC9JC,aAAcF,WAAWlC,EAASqC,MAAkCH,WAAWlC,EAASqC,MAAkCrC,EAASqC,KACnIC,aAAcJ,WAAWlC,EAASuC,MAAkCL,WAAWlC,EAASuC,MAAkCvC,EAASuC,KACnIC,MAAOxC,EAASyC,KAChBC,SAAUR,WAAWlC,EAAS2C,MAA8BT,WAAWlC,EAAS2C,MAA8B3C,EAAS2C,KACvHC,OAAQ5C,EAAS6C,KACjBC,KAAM9C,EAAS+C,KACfC,KAAMhD,EAASiD,KACfC,OAAQhB,WAAWlC,EAASmD,MAA4BjB,WAAWlC,EAASmD,MAA4BnD,EAASmD,KACjHC,KAAMpD,EAASqD,KACfC,UAAWtD,EAASuD,KACpBC,eAAgBxD,EAASyD,KACzBC,YAAa1D,EAAS2D,KACtBC,gBAAiB5D,EAAS6D,KAC1BC,qBAAsB5B,WAAWlC,EAAS+D,MAA0C7B,WAAWlC,EAAS+D,MAA0C/D,EAASgE,MAC3JC,SAAU/B,WAAWlC,EAASkE,MAA8BhC,WAAWlC,EAASkE,MAA8BlE,EAASkE,MAG3HC,QAAQC,IAAI,6BAA8BlD,GAE1CmD,YAAiBnD,GAAMoD,KAAvB,sCAA4B,WAAOC,GAAP,qBAAAC,EAAA,qDACxBC,IAAML,IAAI,gCAAiCG,GAEvCA,GAAsB,MAAfA,EAAIG,OACX5E,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAAS+D,MAFiB,cAG1B7D,KAAUyD,GAHgB,kBAK9BtD,KAA8B,GALA,KAQnCnB,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAASgE,MAFiB,cAG1B9D,KAAUyD,GAHgB,kBAK9BtD,KAA8B,GALA,KAZf,yCAA5B,uDAoBG4D,MAAM,SAAAC,GAAU,IAAD,IACdL,IAAML,IAAI,qCAAsCU,GAChDhF,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BG,KAA8B,GALA,OAQzC,MAAO6D,GAAQ,IAAD,IACZL,IAAML,IAAI,8CAA+CU,GACzDhF,EAASY,GAA0B,mBAC9BC,KAD8B,mBAE1BC,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BG,KAA8B,GALA,QAYlC8D,EAAc,SAAClF,GACxB,OAAO,SAACC,EAAUC,GACd,IAAK,IAAD,IAQiB,IANXC,EADcD,IAAWE,MAAcC,MAChB8E,MAGvB5E,EAAOL,IAAWM,MAAWC,MAC7BC,EAAaH,GAAQA,EAAKI,OAAcJ,EAAKI,MAAWD,WAAaH,EAAKI,MAAWD,gBAAaE,EAExG,IAAKF,EAUD,YATAT,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASC,MAFiB,cAG1BC,KAAU,CACPC,QAASC,OAJc,kBAO9BkE,MAA+B,GAPD,KAavCpF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASC,MAFiB,cAG1BC,KAAU,IAHgB,kBAK9BoE,MAA+B,GALD,KAQnC,IAAMhE,EAAO,CACTX,aACA4E,WAAYnF,EAASoF,MACrBjE,KAAMnB,EAASqF,MACfhE,kBAAmBrB,EAASsF,MAC5B/D,iBAAkBvB,EAASuF,MAC3B9D,OAAQzB,EAASwF,MACjB7D,eAAgB3B,EAASyF,MACzB5D,MAAO7B,EAAS0F,MAChB3D,YAAa/B,EAAS2F,MACtB1D,sBAAuBC,WAAWlC,EAAS4F,OAA4C1D,WAAWlC,EAAS4F,OAA4C5F,EAAS4F,MAChKxD,aAAcF,WAAWlC,EAAS6F,OAAmC3D,WAAWlC,EAAS6F,OAAmC7F,EAAS6F,MACrIvD,aAAcJ,WAAWlC,EAAS8F,OAAmC5D,WAAWlC,EAAS8F,OAAmC9F,EAAS8F,MACrItD,MAAOxC,EAAS+F,MAChBrD,SAAUR,WAAWlC,EAASgG,OAA+B9D,WAAWlC,EAASgG,OAA+BhG,EAASgG,MACzHpD,OAAQ5C,EAASiG,MACjBnD,KAAM9C,EAASkG,MACflD,KAAMhD,EAASmG,MACfjD,OAAQhB,WAAWlC,EAASoG,OAA6BlE,WAAWlC,EAASoG,OAA6BpG,EAASoG,MACnHhD,KAAMpD,EAASqG,MACf/C,UAAWtD,EAASsG,MACpB9C,eAAgBxD,EAASuG,MACzB7C,YAAa1D,EAASwG,MACtB5C,gBAAiB5D,EAASyG,MAC1B3C,qBAAsB5B,WAAWlC,EAASgE,OAA2C9B,WAAWlC,EAASgE,OAA2ChE,EAASgE,MAC7JC,SAAU/B,WAAWlC,EAAS0G,OAA+BxE,WAAWlC,EAAS0G,OAA+B1G,EAAS0G,OAG7HvC,QAAQC,IAAI,0BAA2BlD,GAEvCyF,YAAkBzF,GAAMoD,KAAxB,sCAA6B,WAAOC,GAAP,qBAAAC,EAAA,qDACzBC,IAAML,IAAI,qCAAsCG,GAE5CA,GAAsB,MAAfA,EAAIG,OACX5E,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAAS+D,MAFiB,cAG1B7D,KAAUyD,GAHgB,kBAK9BW,MAA+B,GALD,KAQnCpF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAUyD,GAHgB,kBAK9BW,MAA+B,GALD,KAZd,yCAA7B,uDAoBGL,MAAM,SAAAC,GAAU,IAAD,IACdL,IAAML,IAAI,0CAA2CU,GACrDhF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BoE,MAA+B,GALD,OAQzC,MAAOJ,GAAQ,IAAD,IACZL,IAAML,IAAI,8CAA+CU,GACzDhF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BoE,MAA+B,GALD,QAYlC0B,EAAgB,SAACC,GAC1B,OAAO,SAAC/G,EAAUC,GACd,IAAK,IAAD,IAQiB,IAHXK,EAAOL,IAAWM,MAAWC,MAC7BC,EAAaH,GAAQA,EAAKI,OAAcJ,EAAKI,MAAWD,WAAaH,EAAKI,MAAWD,gBAAaE,EAExG,IAAKF,EAUD,YATAT,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAASC,MAFiB,cAG1BC,KAAU,CACPC,QAASC,OAJc,kBAO9B+F,MAAiC,GAPH,KAavCjH,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAASC,MAFiB,cAG1BC,KAAU,IAHgB,kBAK9BiG,MAAiC,GALH,KAQnC,IAAM7F,EAAO,CACTX,aACA4E,WAAY0B,GAGhB1C,QAAQC,IAAI,4BAA6BlD,GAEzC8F,YAAoB9F,GAAMoD,KAA1B,sCAA+B,WAAOC,GAAP,qBAAAC,EAAA,qDAC3BC,IAAML,IAAI,uCAAwCG,GAE9CA,GAAsB,MAAfA,EAAIG,OACX5E,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAAS+D,MAFiB,cAG1B7D,KAAUyD,GAHgB,kBAK9BwC,MAAiC,GALH,KAQnCjH,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAASgE,MAFiB,cAG1B9D,KAAUyD,GAHgB,kBAK9BwC,MAAiC,GALH,KAZZ,yCAA/B,uDAoBGlC,MAAM,SAAAC,GAAU,IAAD,IACdL,IAAML,IAAI,0CAA2CU,GACrDhF,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BiG,MAAiC,GALH,OAQzC,MAAOjC,GAAQ,IAAD,IACZL,IAAML,IAAI,qDAAsDU,GAChEhF,EAASY,GAA0B,mBAC9BoG,MAD8B,mBAE1BlG,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BiG,MAAiC,GALH,QAsFlCE,EAAkB,WAC3B,OAAO,SAACnH,EAAUC,GACd,IAAK,IAAD,IAQiB,IANXC,EADcD,IAAWE,MAAcC,MAChB8E,MAGvB5E,EAAOL,IAAWM,MAAWC,MAC7BC,EAAaH,GAAQA,EAAKI,OAAcJ,EAAKI,MAAWD,WAAaH,EAAKI,MAAWD,gBAAaE,EAExG,IAAKF,EAUD,YATAT,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASC,MAFiB,cAG1BC,KAAU,CACPC,QAASC,OAJc,kBAO9BkG,MAA2C,GAPb,KAavCpH,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASC,MAFiB,cAG1BC,KAAU,IAHgB,kBAK9BoG,MAA2C,GALb,KAQnC,IAAMhG,EAAO,CACTX,aACA4E,WAAYnF,EAASoF,OAGzBjB,QAAQC,IAAI,gCAAiClD,GAE7CiG,YAAsBjG,GAAMoD,KAA5B,sCAAiC,WAAOC,GAAP,uBAAAC,EAAA,qDAC7BC,IAAML,IAAI,2CAA4CG,GAElDA,GAAsB,MAAfA,EAAIG,QAELtE,EAAOmE,GAAOA,EAAInE,KAAOmE,EAAInE,KAAO,GAE1CN,EAASY,GAA0B,mBAC9BwG,MAA2C,GADb,cAE9BE,KAAsBhH,EAAKqB,QAAUrB,EAAKqB,OAAO4F,OAASjH,EAAKqB,OAAO6F,IAAI,SAACC,EAAKC,GAAN,MAAiB,CAAEA,QAAOC,MAAOF,EAAIE,MAAOC,UAAU,KAAW,IAF7G,KAKnC5H,EAAS6H,GAAyB,mBAC7BtC,KAAyBjF,EAAKe,MADD,cAE7BmE,KAAsClF,EAAKwH,kBAFd,cAG7BrC,KAAqCnF,EAAKyH,iBAHb,cAI7BpC,KAA6BrF,EAAK0H,eAJL,cAK7BpC,KAA0BtF,EAAKyB,OALF,cAM7B8D,KAAgCvF,EAAK2B,aANR,cAO7B6D,KAA0CxF,GAAQA,EAAK2H,oBAAsB,EAAnC,UAA0C3H,EAAK2H,oBAAuB,IAPnF,cAQ7BlC,KAAiCzF,GAAQA,EAAK4H,aAAe,EAA5B,UAAmC5H,EAAK4H,aAAgB,IAR5D,cAS7BlC,KAAiC1F,GAAQA,EAAK6H,aAAe,EAA5B,UAAmC7H,EAAK6H,aAAgB,IAT5D,cAU7BlC,KAA0B3F,EAAKoC,OAVF,cAW7BwD,KAA6B5F,GAAQA,EAAKsC,UAAY,EAAzB,UAAgCtC,EAAKsC,UAAa,IAXlD,cAY7BuD,KAA0B7F,EAAKwC,QAZF,cAa7BsD,KAAyB9F,EAAK0C,MAbD,cAc7BqD,KAAyB/F,EAAK4C,MAdD,cAe7BoD,KAA2BhG,GAAQA,EAAK8C,QAAU,EAAvB,UAA8B9C,EAAK8C,QAAW,IAf5C,cAgB7BmD,KAA0BjG,EAAKgD,MAhBF,cAiB7BkD,KAAgClG,EAAK8H,UAjBR,cAkB7B3B,KAAkCnG,EAAK+H,cAlBV,cAmB7B3B,KAAgCpG,EAAKgI,YAnBR,cAoB7B3B,KAAoCrG,EAAKiI,eApBZ,cAqB7BrE,KAAyC5D,GAAQA,EAAKkI,mBAAqB,EAAlC,UAAyClI,EAAKkI,mBAAsB,IArBhF,cAsB7B5B,KAA6BtG,GAAQA,EAAK6D,UAAY,EAAzB,UAAgC7D,EAAK6D,UAAa,IAtBlD,MAyBlCnE,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAUyD,GAHgB,kBAK9B2C,MAA2C,GALb,KArCV,yCAAjC,uDA6CGrC,MAAM,SAAAC,GAAU,IAAD,IACdL,IAAML,IAAI,gDAAiDU,GAC3DhF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BoG,MAA2C,GALb,OAQzC,MAAOpC,GAAQ,IAAD,IACZL,IAAML,IAAI,yDAA0DU,GACpEhF,EAASY,GAA0B,mBAC9BuE,MAD8B,mBAE1BrE,KAASgE,MAFiB,cAG1B9D,KAAU,IAHgB,kBAK9BoG,MAA2C,GALb,QAYlCqB,EAA2B,SAAC1I,GACrC,OAAO,SAACC,EAAUC,GACd,IACI,IAAMC,EAAWD,IAAWE,MAAcC,MACpCE,EAAOoI,OAAOC,OAAOzI,EAASG,KAAmBN,GAEvDC,EAAS4I,EAAmBF,OAAOC,OAAOzI,EAAdwI,OAAA,IAAAA,CAAA,GACvBrI,IAAmBC,MAE1B,MAAO0E,GACLL,IAAML,IAAI,2CAA4CU,MAMrD6C,EAA4B,SAAC9H,GACtC,OAAO,SAACC,EAAUC,GACd,IACI,IAAMC,EAAWD,IAAWE,MAAcC,MACpCE,EAAOoI,OAAOC,OAAOzI,EAASgF,MAAoBnF,GAExDC,EAAS4I,EAAmBF,OAAOC,OAAOzI,EAAdwI,OAAA,IAAAA,CAAA,GACvBxD,KAAoB5E,MAE3B,MAAO0E,GACLL,IAAML,IAAI,4CAA6CU,MAMtD6D,EAA8B,SAAC9I,GACxC,OAAO,SAACC,EAAUC,GACd,IACI,IAAMC,EAAWD,IAAWE,MAAcC,MACpCE,EAAOoI,OAAOC,OAAOzI,EAAS4I,MAAsB/I,GAE1DC,EAAS4I,EAAmBF,OAAOC,OAAOzI,EAAdwI,OAAA,IAAAA,CAAA,GACvBI,KAAsBxI,MAE7B,MAAO0E,GACLL,IAAML,IAAI,4CAA6CU,MAMtDpE,EAA6B,SAACb,GACvC,OAAO,SAACC,EAAUC,GACd,IACI,IAAMC,EAAWD,IAAWE,MAAcC,MACpCE,EAAOoI,OAAOC,OAAOzI,EAAUH,GAErCC,EAAS4I,EAAmBtI,IAC9B,MAAO0E,GACLL,IAAML,IAAI,4CAA6CU,MAM7D4D,EAAqB,SAAC7I,GACxB,OAAO,SAACC,EAAUC,GACd,IACI,IAAMC,EAAWD,IAAWE,MAAcC,MAE1CJ,EAAS,CACL+I,KAAMC,KACNC,QAASP,OAAOC,OAAOzI,EAAUH,KAEvC,MAAOiF,GACLL,IAAML,IAAI,mCAAoCU,MAM7CkE,EAAoB,SAACnJ,GAC9B,OAAO,SAACC,EAAUC,GACd,IACID,EAAS,CACL+I,KAAMI,KACNF,QAAS,KAEf,MAAOjE,GACLL,IAAML,IAAI,mCAAoCU,O,kICnjBrCoE,E,2MAcjBC,kBAAoB,WAAO,IAGnBC,EAHkB,EACkC,EAAKC,MAArDC,EADc,EACdA,IAAKC,EADS,EACTA,MAAOC,EADE,EACFA,eAAgBC,EADd,EACcA,gBAIhCL,EADAM,OAAOC,OAAOC,QACL,CACLC,UAAW,wCACXC,WAAY,wCAGP,CACLD,UAAW,uCACXC,WAAY,yCAIpBJ,OAAOK,EAAP,WAAaT,IAAOU,WAAWxB,OAAOC,OAAOgB,EAAiB,CAC1DQ,UAAWb,KACXc,GAAG,aAAc,SAAUC,GAC3BX,EAAe,IAAIY,KAAKD,EAAEE,MAAMC,aAGhCf,GACAG,OAAOK,EAAP,WAAaT,IAAOU,WAAW,UAAWO,IAAOhB,GAAOiB,OAAO,gB,EAIvEC,mBAAqB,SAACC,GAAe,IAAD,EACT,EAAKrB,MAApBE,EADwB,EACxBA,MAAOD,EADiB,EACjBA,IAEXC,IAAUmB,EAAUnB,OAChBA,GACAG,OAAOK,EAAP,WAAaT,IAAOU,WAAW,UAAWO,IAAOhB,GAAOiB,OAAO,gB,wEAKjE,IAAD,EACwBG,KAAKtB,MAA1BC,EADH,EACGA,IAAKsB,EADR,EACQA,YAEb,OACI,2BAAO/B,KAAK,OAAOgC,UAAU,eAAehE,GAAIyC,EAAKwB,UAAQ,EAACF,YAAaA,Q,GAvD3CG,iBAAvB7B,EAUV8B,aAAe,CAClBJ,YAAa,e,2CCPfK,E,YAQF,WAAY5B,GAAQ,IAAD,8BACf,4CAAMA,KAUVF,kBAAoB,WAChB,EAAK+B,QAZU,EAenBC,gBAAkB,WAAO,IAAD,EACsB,EAAK9B,MAAvC3F,EADY,EACZA,YAAamF,EADD,EACCA,KAAMtI,EADP,EACOA,WACnBgJ,EAAU,EAAK6B,MAAf7B,MAEK,SAATV,IAAoBtI,GAAegJ,GAASA,EAAMpI,MAEtDkK,YAAuB,CACnB9K,aACAmD,YAAaA,IAEZY,KAAK,SAACC,GACCA,EAAIxD,UAAYuK,OAChB,EAAKC,SAAS,CACVhC,MAAOhF,EAAInE,OAEf,EAAK8K,UAGZrG,MAAM,SAAC2G,GACJ,EAAKN,UAlCE,EAsCnBA,KAAO,WACH,EAAKO,gBAvCU,EA0CnBA,aAAe,WAAa,IAAD,EAC6Bd,KAAKtB,MAAjD9I,EADe,EACfA,WAAYmL,EADG,EACHA,uBAAwBpC,EADrB,EACqBA,IACxCqC,EAAOhB,KAENjB,OAAOK,GAoBZL,OAAOK,EAAP,WAAaT,IAAOsC,QAAQ,CACxBhB,YAAa,sBACbiB,YAAY,EACZC,KAAM,CACFC,IAAKC,cACLC,MAAO,IACPC,QAAS,CACL,cAAiBC,eAErB/L,KAAM,SAAUgM,GAEZ,MAAO,CACHC,OAAQD,EAAOE,KAAOF,EAAOE,KAAO,GACpCC,KAAMH,EAAOG,KAAOH,EAAOG,KAAO,EAClCC,UAAW,GACXjM,eAGRkM,eAAgB,SAAUrM,EAAMgM,GAG5B,OAFAA,EAAOG,KAAOH,EAAOG,MAAQ,EAEtB,CACHG,QAAStM,GAAQA,EAAKA,MAAQA,EAAKA,KAAKuM,OAASvM,EAAKA,KAAKuM,MAAMtF,OAASjH,EAAKA,KAAKuM,MAAMrF,IAAI,SAAAC,GAK1F,OAJIA,EAAI+B,MACJ/B,EAAIV,GAAKU,EAAI+B,KAGV/B,IACN,GACLqF,WAAY,CACRC,QAAMzM,GAAQA,EAAKA,MAAQA,EAAKA,KAAK0M,UAAU1M,EAAKA,KAAK0M,WAIrEC,OAAO,GAEXC,aAAc,SAAUC,GACpB,OAAOA,GAEXC,mBAAoB,EACpBC,eAvDJ,SAAoBC,GAChB,OAAIA,EAAKC,QAAgBD,EAAKE,KACjB,0JAE8CF,EAAKjM,KAAO,UAoDvEoM,kBAhDJ,SAA6BH,GAAO,IACxB7D,EAAUoC,EAAKP,MAAf7B,MAGR,OADA6D,EAAK9D,KAAOoC,GAA0BA,EAAuB0B,EAAK9D,KAC3D8D,EAAKjM,MAAQoI,EAAMpI,MAAQiM,EAAKE,SA/D5B,EA+GnBE,oBAAsB,WAAO,IACjBlE,EAAQ,EAAKD,MAAbC,IACRI,OAAOK,EAAP,WAAaT,IAAOmE,IAAI,MAAMC,QAAQ,WAjHvB,EAoHnBjD,mBAAqB,SAACC,GAAe,IAAD,EACiB,EAAKrB,MAA9CsE,EADwB,EACxBA,wBAAyBjK,EADD,EACCA,YAE3BkK,EAA8BlD,GAAaA,EAAUiD,wBAA0BjD,EAAUiD,wBAA0B,GACzH,GAAIA,EAAwB/M,QAAYgN,EAA4BhN,MAChE,OAAQ+M,EAAwB/M,OAC5B,KAAK+D,KACD,EAAK6I,sBAKb9J,IAAgBgH,EAAUhH,aAC1B,EAAKyH,mBA9HT,EAAKC,MAAQ,CACT7B,MAAO,CACH1C,QAAIpG,EACJU,UAAMV,IANC,E,sEAqIT,IAAD,EAC+BkK,KAAKtB,MAAjCwE,EADH,EACGA,YAAaC,EADhB,EACgBA,MAAOxE,EADvB,EACuBA,IAE5B,OACI,yBAAKuB,UAAU,kBACX,2BAAOA,UAAU,qCAAqCiD,GACtD,yBAAKjD,UAAU,+BAA+BhE,GAAG,sCAC7C,4BAAQgE,UAAU,0BAA0BhE,GAAIyC,EAAKnI,KAAK,SACtD,kCAEH0M,Q,GAvJQ9C,iBA2KdgD,cAbI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAClBC,EAAYF,GAAQA,EAAK1N,MAAY0N,EAAK1N,WAAYG,EACtDF,KAAa2N,GAAaA,EAAU1N,OAAc0N,EAAU1N,MAAWD,aAAa2N,EAAU1N,MAAWD,WAEzG4N,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQG,UAAgB3N,EAG/E,MAAQ,CACJF,aACAoN,wBAJ4BQ,GAAgBA,EAAaxN,KAA8BwN,EAAaxN,KAA8B,KAQ3HoN,CAAoB9C,G,cC3K7BoD,E,2MAKFC,SAAW,WAEWC,SAASC,eAAe,wBAC9BC,S,EAKhBC,aAAe,SAACvE,GAAO,IAAD,EAC6B,EAAKd,MAA5C5H,EADU,EACVA,OAAQf,EADE,EACFA,2BAEZiO,EAAUlN,EACdkN,EAAQC,KAAK,CACTpH,MAAO/F,GAAUA,EAAO4F,OAAS5F,EAAOA,EAAO4F,OAAS,GAAGG,MAAQ,EAAI,EACvEC,MAAO0C,EAAE0E,OAAOC,MAAM,KAG1BpO,EAA2B,eACtBqO,IAAqBJ,K,wEAIpB,IAAD,EAC2BhE,KAAKtB,MAA7B5H,EADH,EACGA,OAAQoM,EADX,EACWA,YAGhB,OAFApJ,IAAML,IAAI,wBAAyB3C,GAG/B,yBAAKoJ,UAAU,qBACX,kBAAC,EAAD,CACIvB,IAAK,yBACLgF,SAAU3D,KAAK2D,SAASU,KAAKrE,MAC7B+D,aAAc/D,KAAK+D,aAAaM,KAAKrE,QAGrClJ,GAAUA,EAAO4F,OACb5F,EAAO6F,IAAI,SAAAC,GACP,OAAO,kBAAC,EAAD,CAAa+B,IAAK/B,EAAIC,MAAOyH,IAAK1H,EAAIC,MAAOC,MAAOF,EAAIE,UAEjE,8BAEToG,O,GA7CkB9C,iBA8DpBgD,cAXI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAExEgB,EAAS0M,GAAgBA,EAAaY,KAAsBZ,EAAaY,KAAsB,GAErG,MAAQ,CACJtN,SACA4F,OAAQ5F,EAAO4F,SAIY,CAC/B3G,gCADWqN,CAEZM,GChEGa,E,2MAKF9D,MAAQ,CACJ+D,UAAU,EACV1H,MAAO,GACP2H,WAAW,EACXC,YAAY,EACZC,UAAU,G,EAGdnG,kBAAoB,WAChB,EAAK+B,Q,EAGTA,KAAO,WAAO,IACFzD,EAAU,EAAK4B,MAAf5B,MAER,EAAK8H,gBAAgB9H,I,EAGzB+H,OAAS,WAAO,IAAD,EACiH,EAAKnG,MAAzH5B,EADG,EACHA,MAAY/G,GADT,EACI4I,IADJ,EACS5I,4BAAoD6H,GAD7D,EACqCkH,eADrC,EACqDhO,OADrD,EAC6D8G,0BAD7D,KACuFmH,sBAC/D,EAAKtE,OAAhCiE,EAFG,EAEHA,WAFG,EAESD,WAIhBC,IAIJ,EAAK9D,SAAS,CAAE6D,WAAW,EAAMC,YAAY,EAAOC,UAAU,IAC9DK,YAAwBlI,GACnBnD,KAAK,SAAAlE,GACF,EAAKmL,SAAS,CAAE6D,WAAW,EAAOC,YAAY,EAAMC,UAAU,IAE9D,IAAIX,EAAU,EAAKtF,MAAMoG,gBAAkB,EAAKpG,MAAMoG,eAAepI,OAAS,EAAKgC,MAAMoG,eAAiB,GAC1Gd,EAAQC,KAAK,CACTnH,MAAOrH,EAAKwP,WAGhBnL,IAAML,IAAI,4BAA6BuK,GACvCpG,EAAyB,eACpB7G,IAAmCiN,IAExCjO,EAA2B,eACtBmP,IAAwC,EAAKxG,MAAMqG,sBAAwB,MAGnF7K,MAAM,SAAA2G,GACH/G,IAAML,IAAI,6BAA8BoH,GACxC,EAAKD,SAAS,CAAE6D,WAAW,EAAOC,YAAY,EAAOC,UAAU,IAC/D5O,EAA2B,eACtBmP,IAAwC,EAAKxG,MAAMqG,sBAAwB,Q,EAK5FI,cAAgB,WAAO,IAAD,EACkC,EAAKzG,MAAjD3I,EADU,EACVA,2BAA4Be,EADlB,EACkBA,OAAQ6H,EAD1B,EAC0BA,IAE5C,EAAKiC,SAAS,CAAE4D,UAAU,IAE1B,IAAIR,EAAUlN,GAAUA,EAAO4F,OAAS5F,EAAS,GAC7C+F,EAAQ/F,EAAOsO,UAAU,SAAAxI,GAAG,OAAIA,EAAIC,QAAU8B,KAEnC,IAAX9B,GAAcmH,EAAQqB,OAAOxI,EAAO,GAExC9G,EAA2B,eACtBqO,IAAqBtN,K,EAe9BgJ,mBAAqB,SAACC,GAAe,IACzBuF,EAAoB,EAAK5G,MAAzB4G,gBAEJA,IAAoBvF,EAAUuF,iBAC1BA,GACA,EAAKT,U,+EAhBDU,GACZ,IAAIC,EAAS,IAAIC,WACbzE,EAAOhB,KACXwF,EAAOE,UAAY,WACf1E,EAAKJ,SAAS,CACV9D,MAAO0I,EAAOG,UAGtBH,EAAOI,cAAcL,K,+BAaf,IAAD,EACwDvF,KAAKS,MAA1D+D,EADH,EACGA,SAAU1H,EADb,EACaA,MAAO2H,EADpB,EACoBA,UAAWC,EAD/B,EAC+BA,WAAYC,EAD3C,EAC2CA,SAEhD,OAAIH,EAAiB,KAKjB,yBAAKtE,UAAU,mCAAmChE,GAAG,0BACjD,yBAAKgE,UAAU,oBAAoB2F,MAAO,CAAEC,gBAAgB,QAAD,OAAUhJ,EAAV,SAEvD4H,GAAcD,EACV,yBAAKvE,UAAU,+BACX,uBAAG2F,MAAO,CAAEE,MAAO,UAAWC,gBAAiB,qBAAsBC,YAAa,GAAIC,aAAc,KAAOzB,EAAY,eAAiB,aAE1I,0BAAMvE,UAAU,oBAAoBiG,QAASnG,KAAKmF,cAAcd,KAAKrE,MAAO6F,MAAO,CAAEO,QAAS,QAAUC,cAAY,aAAaC,MAAM,GAAGC,sBAAoB,iBAC5J,uBAAGrG,UAAU,iBAKrByE,EACI,yBAAKzE,UAAU,+BACX,uBAAG2F,MAAO,CAAEE,MAAO,UAAWC,gBAAiB,qBAAsBC,YAAa,GAAIC,aAAc,KAAO,cAE7G,U,GAzHA9F,iBAsJXgD,cAtBI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAExET,EAAWmO,GAAgBA,EAAahO,KAAoBgO,EAAahO,UAAoBM,EAC7FgP,EAAiBzP,GAAYA,EAAS0B,KAAoC1B,EAAS0B,KAAoC,GAEvHD,EAAS0M,GAAgBA,EAAaY,KAAsBZ,EAAaY,UAAsBtO,EAC/FwP,KAAkB9B,IAAgBA,EAAagD,OAAmChD,EAAagD,KAC/FzB,EAAwBvB,GAAgBA,EAAa0B,KAAyC1B,EAAa0B,KAAyC,EAI1J,OAFA1L,QAAQC,IAAI,sCAAuC6L,GAE3C,CACJxO,SACAwO,kBACAR,iBACApI,OAAQ5F,EAAO4F,OACfqI,wBACA0B,qBAAsB3B,EAAepI,SAIV,CAC/B3G,+BACA6H,8BAFWwF,CAGZmB,GCzJGmC,E,iLAOQ,IAAD,EACoD1G,KAAKtB,MAAtDiI,EADH,EACGA,gBAAiB5C,EADpB,EACoBA,aAAcpF,EADlC,EACkCA,IAAKgF,EADvC,EACuCA,SAE5C,OAAIgD,EAAwB,KAGxB,yBAAKzG,UAAU,mCAAmCiG,QAASxC,EAAUzH,GAAIyC,GACrE,yBAAKuB,UAAU,qBACX,2BAAOhC,KAAK,OAAO0I,QAAQ,EAAMC,OAAO,UAAU3K,GAAG,uBAAuB4K,SAAU/C,KAE1F,yBAAK7D,UAAU,+BACX,yBAAK6G,IAAI,uBAAuBC,OAAO,a,GAlB5B5G,iBAmChBgD,cAVI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAI9E,MAAQ,CACJ6Q,mBAHoBnD,IAAgBA,EAAagD,OAAmChD,EAAagD,OAOtE,CAC/BzQ,gCADWqN,CAEZsD,GC1CkBO,E,iLAKP,IAAD,EACyDjH,KAAKtB,MAA3DwI,EADH,EACGA,SAAUC,EADb,EACaA,kBAAmBC,EADhC,EACgCA,qBAErC,OACI,yBAAKlH,UAAU,yEACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,0BACX,0BAAMA,UAAU,yBACZ,uBAAGA,UAAU,wCAEjB,wBAAIA,UAAU,0BAAd,kBAIJ,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,4BACX,4BAAQhC,KAAK,SAASgC,UAAU,8CAA8CmG,cAAY,WAAWgB,gBAAc,OAAOC,gBAAc,SACpI,uBAAGpH,UAAU,mBADjB,WAGA,yBAAKA,UAAU,qCACX,wBAAIA,UAAU,UACV,wBAAIA,UAAU,0CACV,0BAAMA,UAAU,wBAAhB,qBAEJ,wBAAIA,UAAU,gBACV,uBAAGA,UAAU,6BAA6BiG,QAASiB,EAAuB,aAAYD,GAClF,uBAAGjH,UAAU,wCACb,0BAAMA,UAAU,qBAAqBkH,EAAuB,aAAe,gBAU/G,yBAAKlH,UAAU,oBAEX,2BAAOA,UAAU,kEAAkEhE,GAAIgL,GACnF,+BACI,4BACI,wCACA,oCACA,4CACA,iD,GArDD9G,iBCK7BmH,E,2MAKF5D,SAAW,WAEWC,SAASC,eAAe,wBAC9BC,S,EAKhBC,aAAe,SAACvE,GAAO,IAAD,EAC6B,EAAKd,MAA5C5H,EADU,EACVA,OAAQf,EADE,EACFA,2BAEZiO,EAAUlN,EACdkN,EAAQC,KAAK,CACTpH,MAAO/F,GAAUA,EAAO4F,OAAS5F,EAAOA,EAAO4F,OAAS,GAAGG,MAAQ,EAAI,EACvEC,MAAO0C,EAAE0E,OAAOC,MAAM,KAG1BpO,EAA2B,eACtB0G,KAAsBuH,K,wEAIrB,IAAD,EAC2BhE,KAAKtB,MAA7B5H,EADH,EACGA,OAAQoM,EADX,EACWA,YAGhB,OAFApJ,IAAML,IAAI,wBAAyB3C,GAG/B,yBAAKoJ,UAAU,qBACX,kBAAC,EAAD,CACIvB,IAAK,0BACLgF,SAAU3D,KAAK2D,SAASU,KAAKrE,MAC7B+D,aAAc/D,KAAK+D,aAAaM,KAAKrE,QAGrClJ,GAAUA,EAAO4F,OACb5F,EAAO6F,IAAI,SAAAC,GACP,OAAO,kBAAC,EAAD,CAAiB+B,IAAK/B,EAAIC,MAAOyH,IAAK1H,EAAIC,MAAOC,MAAOF,EAAIE,MAAOC,SAAUH,EAAIG,aAE1F,8BAETmG,O,GA7CsB9C,iBA8DxBgD,cAXI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAExEgB,EAAS0M,GAAgBA,EAAa/G,MAAuB+G,EAAa/G,MAAuB,GAEvG,MAAQ,CACJ3F,SACA4F,OAAQ5F,EAAO4F,SAIY,CAC/B3G,gCADWqN,CAEZmE,GChEGC,E,2MAKF/G,MAAQ,CACJ+D,UAAU,EACV1H,MAAO,GACP2H,WAAW,EACXC,YAAY,EACZC,UAAU,G,EAGdnG,kBAAoB,WAChB,EAAK+B,Q,EAGTA,KAAO,WAAO,IAAD,EACmB,EAAK7B,MAAzB5B,EADC,EACDA,MADC,EACMC,SAGX,EAAK6D,SAAS,CACV9D,UAMR,EAAK8H,gBAAgB9H,I,EAGzB+H,OAAS,WAAO,IAAD,EAC4H,EAAKnG,MAApI5B,EADG,EACHA,MAAOC,EADJ,EACIA,SAAehH,GADnB,EACc4I,IADd,EACmB5I,4BAA2EiH,GAD9F,EAC+C8H,eAD/C,EAC+DhO,OAD/D,EACuEiO,sBADvE,EAC8F/H,2BAD9F,EAEuB,EAAKyD,MAA/BiE,EAFG,EAEHA,WAER,IAJW,EAESD,YAIhBC,EAAJ,CAIA,GAAI3H,EAAU,CACV,EAAK6D,SAAS,CAAE6D,WAAW,EAAOC,YAAY,EAAMC,UAAU,IAE9D,IAAIX,EAAU,EAAKtF,MAAMoG,gBAAkB,EAAKpG,MAAMoG,eAAepI,OAAS,EAAKgC,MAAMoG,eAAiB,GAa1G,OAZAd,EAAQC,KAAK,CACTnH,UAGJhD,IAAML,IAAI,4BAA6BuK,GACvChH,EAA0B,eACrBnC,KAAoCmJ,SAEzCjO,EAA2B,eACtB0R,KAAyC,EAAK/I,MAAMqG,sBAAwB,IAMrF,EAAKnE,SAAS,CAAE6D,WAAW,EAAMC,YAAY,EAAOC,UAAU,IAC9DK,YAAwBlI,GACnBnD,KAAK,SAAAlE,GACF,EAAKmL,SAAS,CAAE6D,WAAW,EAAOC,YAAY,EAAMC,UAAU,IAE9D,IAAIX,EAAU,EAAKtF,MAAMoG,gBAAkB,EAAKpG,MAAMoG,eAAepI,OAAS,EAAKgC,MAAMoG,eAAiB,GAC1Gd,EAAQC,KAAK,CACTnH,MAAOrH,EAAKwP,WAGhBnL,IAAML,IAAI,4BAA6BuK,GACvChH,EAA0B,eACrBnC,KAAoCmJ,IAEzCjO,EAA2B,eACtB0R,KAAyC,EAAK/I,MAAMqG,sBAAwB,MAGpF7K,MAAM,SAAA2G,GACH/G,IAAML,IAAI,6BAA8BoH,GACxC,EAAKD,SAAS,CAAE6D,WAAW,EAAOC,YAAY,EAAOC,UAAU,IAC/D5O,EAA2B,eACtB0R,KAAyC,EAAK/I,MAAMqG,sBAAwB,Q,EAK7FI,cAAgB,WAAO,IAAD,EACkC,EAAKzG,MAAjD3I,EADU,EACVA,2BAA4Be,EADlB,EACkBA,OAAQ6H,EAD1B,EAC0BA,IAE5C,EAAKiC,SAAS,CAAE4D,UAAU,IAE1B,IAAIR,EAAUlN,GAAUA,EAAO4F,OAAS5F,EAAS,GAC7C+F,EAAQ/F,EAAOsO,UAAU,SAAAxI,GAAG,OAAIA,EAAIC,QAAU8B,KAEnC,IAAX9B,GAAcmH,EAAQqB,OAAOxI,EAAO,GAExC9G,EAA2B,eACtB0G,KAAsB3F,K,EAe/BgJ,mBAAqB,SAACC,GAAe,IACzBuF,EAAoB,EAAK5G,MAAzB4G,gBAEJA,IAAoBvF,EAAUuF,iBAC1BA,GACA,EAAKT,U,+EAhBDU,GACZ,IAAIC,EAAS,IAAIC,WACbzE,EAAOhB,KACXwF,EAAOE,UAAY,WACf1E,EAAKJ,SAAS,CACV9D,MAAO0I,EAAOG,UAGtBH,EAAOI,cAAcL,K,+BAaf,IAAD,EACwDvF,KAAKS,MAA1D+D,EADH,EACGA,SAAU1H,EADb,EACaA,MAAO2H,EADpB,EACoBA,UAAWC,EAD/B,EAC+BA,WAAYC,EAD3C,EAC2CA,SAEhD,OAAIH,EAAiB,KAKjB,yBAAKtE,UAAU,mCAAmChE,GAAG,0BACjD,yBAAKgE,UAAU,oBAAoB2F,MAAO,CAAEC,gBAAgB,QAAD,OAAUhJ,EAAV,SAEvD4H,GAAcD,EACV,yBAAKvE,UAAU,+BACX,uBAAG2F,MAAO,CAAEE,MAAO,UAAWC,gBAAiB,qBAAsBC,YAAa,GAAIC,aAAc,KAAOzB,EAAY,eAAiB,aAE1I,0BAAMvE,UAAU,oBAAoBiG,QAASnG,KAAKmF,cAAcd,KAAKrE,MAAO6F,MAAO,CAAEO,QAAS,QAAUC,cAAY,aAAaC,MAAM,GAAGC,sBAAoB,iBAC5J,uBAAGrG,UAAU,iBAKrByE,EACI,yBAAKzE,UAAU,+BACX,uBAAG2F,MAAO,CAAEE,MAAO,UAAWC,gBAAiB,qBAAsBC,YAAa,GAAIC,aAAc,KAAO,cAE7G,U,GApJI9F,iBAiLfgD,cAtBI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAExET,EAAWmO,GAAgBA,EAAanJ,MAAqBmJ,EAAanJ,WAAqBvE,EAC/FgP,EAAiBzP,GAAYA,EAASwF,MAAqCxF,EAASwF,MAAqC,GAEzH/D,EAAS0M,GAAgBA,EAAa/G,MAAuB+G,EAAa/G,WAAuB3G,EACjGwP,KAAkB9B,IAAgBA,EAAakE,QAAoClE,EAAakE,MAChG3C,EAAwBvB,GAAgBA,EAAaiE,MAA0CjE,EAAaiE,MAA0C,EAI5J,OAFAjO,QAAQC,IAAI,sCAAuC6L,GAE3C,CACJxO,SACAwO,kBACAR,iBACApI,OAAQ5F,EAAO4F,OACfqI,wBACA0B,qBAAsB3B,EAAepI,SAIV,CAC/B3G,+BACAiH,+BAFWoG,CAGZoE,GCpLGG,E,iLAOQ,IAAD,EACoD3H,KAAKtB,MAAtDiI,EADH,EACGA,gBAAiB5C,EADpB,EACoBA,aAAcpF,EADlC,EACkCA,IAAKgF,EADvC,EACuCA,SAE5C,OAAIgD,EAAwB,KAGxB,yBAAKzG,UAAU,mCAAmCiG,QAASxC,EAAUzH,GAAIyC,GACrE,yBAAKuB,UAAU,qBACX,2BAAOhC,KAAK,OAAO0I,QAAQ,EAAMC,OAAO,UAAU3K,GAAG,uBAAuB4K,SAAU/C,KAE1F,yBAAK7D,UAAU,+BACX,yBAAK6G,IAAI,uBAAuBC,OAAO,a,GAlBxB5G,iBAmCpBgD,cAVI,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACZE,EAAeF,GAAWA,EAAQ/N,MAAe+N,EAAQ/N,WAAeO,EAI9E,MAAQ,CACJ6Q,mBAHoBnD,IAAgBA,EAAakE,QAAoClE,EAAakE,QAOvE,CAC/B3R,gCADWqN,CAEZuE,GC7CH","file":"static/js/0.01e0da22.chunk.js","sourcesContent":["import Utils from '../../components/util/Utils';\nimport { PRODUCT_ROOT, PRODUCT_KEY, PRODUCT_UPDATE, ADD_PRODUCT_FORM, EDIT_PRODUCT_FORM, PRODUCT_RESET, ADD_PRODUCT_REQEUST_LOADING, STATUS, MESSAGE, EMPTY, ADD_PRODUCT_REQUEST_STATUS, SUCCESS, ERROR, USER_ROOT, USER_KEY, USER_DATA, TOKEN_NOT_FOUND, ADD_PRODUCT_FORM_NAME, ADD_PRODUCT_FORM_LONG_DESCRIPTION, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_FORM_RETAIL_PRICE, ADD_PRODUCT_FORM_NOTES, ADD_PRODUCT_FORM_DISCOUNT, ADD_PRODUCT_FORM_SIZE, ADD_PRODUCT_FORM_CODE, ADD_PRODUCT_FORM_WEIGHT, ADD_PRODUCT_FORM_UNITS, ADD_PRODUCT_FORM_EXPIRY_DATE, ADD_PRODUCT_FORM_PUP_GTIN_CODE, ADD_PRODUCT_FORM_CATEGORY_ID, ADD_PRODUCT_FORM_SUB_CATEGORY_ID, ADD_PRODUCT_FORM_QUANTITY, ADD_PRODUCT_FORM_DISTRIBUTOR, ADD_PRODUCT_FORM_MFG_DATE, ADD_PRODUCT_FORM_SHORT_DESCRIPTION, ADD_PRODUCT_FORM_BRAND, ADD_PRODUCT_FORM_REFILL_PRICE, ADD_PRODUCT_FORM_CREATED_BY, ADD_PRODUCT_FORM_ALERT, EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS, ADD_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS, ADD_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS, EDIT_PRODUCT_REQUEST_STATUS, EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING, EDIT_PRODUCT_FORM_PRODUCT_ID, EDIT_PRODUCT_FORM_NAME, EDIT_PRODUCT_FORM_SHORT_DESCRIPTION, EDIT_PRODUCT_FORM_LONG_DESCRIPTION, EDIT_PRODUCT_FORM_UPLOADED_IMAGES, EDIT_PRODUCT_FORM_MFG_DATE, EDIT_PRODUCT_FORM_BRAND, EDIT_PRODUCT_FORM_DISTRIBUTOR, EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS, EDIT_PRODUCT_FORM_RETAIL_PRICE, EDIT_PRODUCT_FORM_REFILL_PRICE, EDIT_PRODUCT_FORM_NOTES, EDIT_PRODUCT_FORM_DISCOUNT, EDIT_PRODUCT_FORM_ALERT, EDIT_PRODUCT_FORM_SIZE, EDIT_PRODUCT_FORM_CODE, EDIT_PRODUCT_FORM_WEIGHT, EDIT_PRODUCT_FORM_UNITS, EDIT_PRODUCT_FORM_EXPIRY_DATE, EDIT_PRODUCT_FORM_PUP_GTIN_CODE, EDIT_PRODUCT_FORM_CATEGORY_ID, EDIT_PRODUCT_FORM_SUB_CATEGORY_ID, EDIT_PRODUCT_FORM_QUANTITY, EDIT_PRODUCT_IMAGES, EDIT_PRODUCT_REQEUST_LOADING, DELETE_PRODUCT_FORM, DELETE_PRODUCT_REQUEST_STATUS, DELETE_PRODUCT_REQEUST_LOADING, DELETE_PRODUCT_FORM_PRODUCT_ID, EXPORT_PRODUCT_REQUEST_STATUS, EXPORT_PRODUCT_REQEUST_LOADING } from '../Types';\nimport { refillAddProduct, refillGetProductViaId, refillEditProduct, refillDeleteProduct, refillExportAllProducts } from '../../apis/APIs';\n\n/** Create Product */\nexport const createProduct = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const productInfo = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const formData = productInfo[ADD_PRODUCT_FORM];\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateProductUIConstraints({\n                    [ADD_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [ADD_PRODUCT_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateProductUIConstraints({\n                [ADD_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [ADD_PRODUCT_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                user_token,\n                name: formData[ADD_PRODUCT_FORM_NAME],\n                short_description: formData[ADD_PRODUCT_FORM_SHORT_DESCRIPTION],\n                long_description: formData[ADD_PRODUCT_FORM_LONG_DESCRIPTION],\n                images: formData[ADD_PRODUCT_FORM_UPLOADED_IMAGES],\n                manufacture_at: formData[ADD_PRODUCT_FORM_MFG_DATE],\n                brand: formData[ADD_PRODUCT_FORM_BRAND],\n                distributor: formData[ADD_PRODUCT_FORM_DISTRIBUTOR],\n                delivery_time_in_days: parseFloat(formData[ADD_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS]) ? parseFloat(formData[ADD_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS]) : formData[ADD_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS],\n                retail_price: parseFloat(formData[ADD_PRODUCT_FORM_RETAIL_PRICE]) ? parseFloat(formData[ADD_PRODUCT_FORM_RETAIL_PRICE]) : formData[ADD_PRODUCT_FORM_RETAIL_PRICE],\n                refill_price: parseFloat(formData[ADD_PRODUCT_FORM_REFILL_PRICE]) ? parseFloat(formData[ADD_PRODUCT_FORM_REFILL_PRICE]) : formData[ADD_PRODUCT_FORM_REFILL_PRICE],\n                notes: formData[ADD_PRODUCT_FORM_NOTES],\n                discount: parseFloat(formData[ADD_PRODUCT_FORM_DISCOUNT]) ? parseFloat(formData[ADD_PRODUCT_FORM_DISCOUNT]) : formData[ADD_PRODUCT_FORM_DISCOUNT],\n                alerts: formData[ADD_PRODUCT_FORM_ALERT],\n                size: formData[ADD_PRODUCT_FORM_SIZE],\n                code: formData[ADD_PRODUCT_FORM_CODE],\n                weight: parseFloat(formData[ADD_PRODUCT_FORM_WEIGHT]) ? parseFloat(formData[ADD_PRODUCT_FORM_WEIGHT]) : formData[ADD_PRODUCT_FORM_WEIGHT],\n                unit: formData[ADD_PRODUCT_FORM_UNITS],\n                expiry_at: formData[ADD_PRODUCT_FORM_EXPIRY_DATE],\n                pupc_gtin_code: formData[ADD_PRODUCT_FORM_PUP_GTIN_CODE],\n                category_id: formData[ADD_PRODUCT_FORM_CATEGORY_ID],\n                sub_category_id: formData[ADD_PRODUCT_FORM_SUB_CATEGORY_ID],\n                average_life_in_days: parseFloat(formData[ADD_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS]) ? parseFloat(formData[ADD_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS]) : formData[EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS],\n                quantity: parseFloat(formData[ADD_PRODUCT_FORM_QUANTITY]) ? parseFloat(formData[ADD_PRODUCT_FORM_QUANTITY]) : formData[ADD_PRODUCT_FORM_QUANTITY]\n            }\n\n            console.log(\"body create password ===> \", body);\n\n            refillAddProduct(body).then(async (res) => {\n                Utils.log(\"Refill Product Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateProductUIConstraints({\n                        [ADD_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [ADD_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateProductUIConstraints({\n                        [ADD_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [ADD_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Product Response ===> error\", error);\n                dispatch(updateProductUIConstraints({\n                    [ADD_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [ADD_PRODUCT_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Refill Product Form Data ===> error \", error);\n            dispatch(updateProductUIConstraints({\n                [ADD_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [ADD_PRODUCT_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Edit Product */\nexport const editProduct = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const productInfo = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const formData = productInfo[EDIT_PRODUCT_FORM];\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateProductUIConstraints({\n                    [EDIT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [EDIT_PRODUCT_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateProductUIConstraints({\n                [EDIT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [EDIT_PRODUCT_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                user_token,\n                product_id: formData[EDIT_PRODUCT_FORM_PRODUCT_ID],\n                name: formData[EDIT_PRODUCT_FORM_NAME],\n                short_description: formData[EDIT_PRODUCT_FORM_SHORT_DESCRIPTION],\n                long_description: formData[EDIT_PRODUCT_FORM_LONG_DESCRIPTION],\n                images: formData[EDIT_PRODUCT_FORM_UPLOADED_IMAGES],\n                manufacture_at: formData[EDIT_PRODUCT_FORM_MFG_DATE],\n                brand: formData[EDIT_PRODUCT_FORM_BRAND],\n                distributor: formData[EDIT_PRODUCT_FORM_DISTRIBUTOR],\n                delivery_time_in_days: parseFloat(formData[EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS]) ? parseFloat(formData[EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS]) : formData[EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS],\n                retail_price: parseFloat(formData[EDIT_PRODUCT_FORM_RETAIL_PRICE]) ? parseFloat(formData[EDIT_PRODUCT_FORM_RETAIL_PRICE]) : formData[EDIT_PRODUCT_FORM_RETAIL_PRICE],\n                refill_price: parseFloat(formData[EDIT_PRODUCT_FORM_REFILL_PRICE]) ? parseFloat(formData[EDIT_PRODUCT_FORM_REFILL_PRICE]) : formData[EDIT_PRODUCT_FORM_REFILL_PRICE],\n                notes: formData[EDIT_PRODUCT_FORM_NOTES],\n                discount: parseFloat(formData[EDIT_PRODUCT_FORM_DISCOUNT]) ? parseFloat(formData[EDIT_PRODUCT_FORM_DISCOUNT]) : formData[EDIT_PRODUCT_FORM_DISCOUNT],\n                alerts: formData[EDIT_PRODUCT_FORM_ALERT],\n                size: formData[EDIT_PRODUCT_FORM_SIZE],\n                code: formData[EDIT_PRODUCT_FORM_CODE],\n                weight: parseFloat(formData[EDIT_PRODUCT_FORM_WEIGHT]) ? parseFloat(formData[EDIT_PRODUCT_FORM_WEIGHT]) : formData[EDIT_PRODUCT_FORM_WEIGHT],\n                unit: formData[EDIT_PRODUCT_FORM_UNITS],\n                expiry_at: formData[EDIT_PRODUCT_FORM_EXPIRY_DATE],\n                pupc_gtin_code: formData[EDIT_PRODUCT_FORM_PUP_GTIN_CODE],\n                category_id: formData[EDIT_PRODUCT_FORM_CATEGORY_ID],\n                sub_category_id: formData[EDIT_PRODUCT_FORM_SUB_CATEGORY_ID],\n                average_life_in_days: parseFloat(formData[EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS]) ? parseFloat(formData[EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS]) : formData[EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS],\n                quantity: parseFloat(formData[EDIT_PRODUCT_FORM_QUANTITY]) ? parseFloat(formData[EDIT_PRODUCT_FORM_QUANTITY]) : formData[EDIT_PRODUCT_FORM_QUANTITY]\n            }\n\n            console.log(\"body edit product ===> \", body);\n\n            refillEditProduct(body).then(async (res) => {\n                Utils.log(\"Refill Edit Product Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateProductUIConstraints({\n                        [EDIT_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [EDIT_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateProductUIConstraints({\n                        [EDIT_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [EDIT_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Edit Product Response ===> error\", error);\n                dispatch(updateProductUIConstraints({\n                    [EDIT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [EDIT_PRODUCT_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Refill Product Form Data ===> error \", error);\n            dispatch(updateProductUIConstraints({\n                [EDIT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [EDIT_PRODUCT_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Delete Product */\nexport const deleteProduct = (id) => {\n    return (dispatch, getState) => {\n        try {\n            // const productInfo = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            // const formData = productInfo[DELETE_PRODUCT_FORM];\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateProductUIConstraints({\n                    [DELETE_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [DELETE_PRODUCT_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateProductUIConstraints({\n                [DELETE_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [DELETE_PRODUCT_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                user_token,\n                product_id: id\n            }\n\n            console.log(\"body delete product ===> \", body);\n\n            refillDeleteProduct(body).then(async (res) => {\n                Utils.log(\"Refill Delete Product Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateProductUIConstraints({\n                        [DELETE_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [DELETE_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateProductUIConstraints({\n                        [DELETE_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [DELETE_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Edit Product Response ===> error\", error);\n                dispatch(updateProductUIConstraints({\n                    [DELETE_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [DELETE_PRODUCT_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Refill Delete Product Form Data ===> error \", error);\n            dispatch(updateProductUIConstraints({\n                [DELETE_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [DELETE_PRODUCT_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Export Product */\nexport const exportProduct = () => {\n    return (dispatch, getState) => {\n        try {\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateProductUIConstraints({\n                    [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [EXPORT_PRODUCT_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateProductUIConstraints({\n                [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [EXPORT_PRODUCT_REQEUST_LOADING]: true\n            }));\n\n            refillExportAllProducts(user_token).then(async (res) => {\n                Utils.log(\"Refill Export Product Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateProductUIConstraints({\n                        [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [EXPORT_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateProductUIConstraints({\n                        [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [EXPORT_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Edit Product Response ===> error\", error);\n                dispatch(updateProductUIConstraints({\n                    [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [EXPORT_PRODUCT_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Refill Delete Product Form Data ===> error \", error);\n            dispatch(updateProductUIConstraints({\n                [EXPORT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [EXPORT_PRODUCT_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Get product via id */\nexport const getProductViaID = () => {\n    return (dispatch, getState) => {\n        try {\n            const productInfo = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const formData = productInfo[EDIT_PRODUCT_FORM];\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateProductUIConstraints({\n                    [EDIT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateProductUIConstraints({\n                [EDIT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                user_token,\n                product_id: formData[EDIT_PRODUCT_FORM_PRODUCT_ID]\n            }\n\n            console.log(\"body get product via id ===> \", body);\n\n            refillGetProductViaId(body).then(async (res) => {\n                Utils.log(\"Refill Get Product Via Id Response ===> \", res);\n\n                if (res && res.status === 200) {\n\n                    const data = res && res.data ? res.data : {};\n\n                    dispatch(updateProductUIConstraints({\n                        [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: false,\n                        [EDIT_PRODUCT_IMAGES]: data.images && data.images.length ? data.images.map((ele, index) => ({ index, image: ele.image, uploaded: true })) : [],\n                    }));\n\n                    dispatch(updateEditProductFormData({\n                        [EDIT_PRODUCT_FORM_NAME]: data.name,\n                        [EDIT_PRODUCT_FORM_SHORT_DESCRIPTION]: data.shortDescription,\n                        [EDIT_PRODUCT_FORM_LONG_DESCRIPTION]: data.longDescription,\n                        [EDIT_PRODUCT_FORM_MFG_DATE]: data.manufactureAt,\n                        [EDIT_PRODUCT_FORM_BRAND]: data.brand,\n                        [EDIT_PRODUCT_FORM_DISTRIBUTOR]: data.distributor,\n                        [EDIT_PRODUCT_FORM_DELIVERY_TIME_IN_DAYS]: data && data.deliveryTimeInDays >= 0 ? `${data.deliveryTimeInDays}` : '',\n                        [EDIT_PRODUCT_FORM_RETAIL_PRICE]: data && data.retailPrice >= 0 ? `${data.retailPrice}` : '',\n                        [EDIT_PRODUCT_FORM_REFILL_PRICE]: data && data.refillPrice >= 0 ? `${data.refillPrice}` : '',\n                        [EDIT_PRODUCT_FORM_NOTES]: data.notes,\n                        [EDIT_PRODUCT_FORM_DISCOUNT]: data && data.discount >= 0 ? `${data.discount}` : '',\n                        [EDIT_PRODUCT_FORM_ALERT]: data.alerts,\n                        [EDIT_PRODUCT_FORM_SIZE]: data.size,\n                        [EDIT_PRODUCT_FORM_CODE]: data.code,\n                        [EDIT_PRODUCT_FORM_WEIGHT]: data && data.weight >= 0 ? `${data.weight}` : '',\n                        [EDIT_PRODUCT_FORM_UNITS]: data.unit,\n                        [EDIT_PRODUCT_FORM_EXPIRY_DATE]: data.expiryAt,\n                        [EDIT_PRODUCT_FORM_PUP_GTIN_CODE]: data.pupcGtinCode,\n                        [EDIT_PRODUCT_FORM_CATEGORY_ID]: data.categoryId,\n                        [EDIT_PRODUCT_FORM_SUB_CATEGORY_ID]: data.subCategoryId,\n                        [EDIT_PRODUCT_FORM_AVERAGE_LIFE_IN_DAYS]: data && data.averageLifeInDays >= 0 ? `${data.averageLifeInDays}` : '',\n                        [EDIT_PRODUCT_FORM_QUANTITY]: data && data.quantity >= 0 ? `${data.quantity}` : ''\n                    }));\n                } else {\n                    dispatch(updateProductUIConstraints({\n                        [EDIT_PRODUCT_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Get Product Via Id Response ===> error\", error);\n                dispatch(updateProductUIConstraints({\n                    [EDIT_PRODUCT_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Refill Get Product Via Id Form Data ===> error \", error);\n            dispatch(updateProductUIConstraints({\n                [EDIT_PRODUCT_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [EDIT_PRODUCT_GET_PRODUCT_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Manage Add Product Form Data */\nexport const updateAddProductFormData = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const data = Object.assign(formData[ADD_PRODUCT_FORM], obj);\n\n            dispatch(updateProductState(Object.assign(formData, {\n                [ADD_PRODUCT_FORM]: data\n            })));\n        } catch (error) {\n            Utils.log(\"Update Add Product Form Data ===> error \", error);\n        }\n    }\n}\n\n/** Manage Edit Product Form Data */\nexport const updateEditProductFormData = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const data = Object.assign(formData[EDIT_PRODUCT_FORM], obj);\n\n            dispatch(updateProductState(Object.assign(formData, {\n                [EDIT_PRODUCT_FORM]: data\n            })));\n        } catch (error) {\n            Utils.log(\"Update Edit Product Form Data ===> error \", error);\n        }\n    }\n}\n\n/** Manage Delete Product Form Data */\nexport const updateDeleteProductFormData = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const data = Object.assign(formData[DELETE_PRODUCT_FORM], obj);\n\n            dispatch(updateProductState(Object.assign(formData, {\n                [DELETE_PRODUCT_FORM]: data\n            })));\n        } catch (error) {\n            Utils.log(\"Update Edit Product Form Data ===> error \", error);\n        }\n    }\n}\n\n/** Manage Product UI Constraints */\nexport const updateProductUIConstraints = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n            const data = Object.assign(formData, obj);\n\n            dispatch(updateProductState(data));\n        } catch (error) {\n            Utils.log(\"Update Product UI Constraints ===> error \", error);\n        }\n    }\n}\n\n/** Update product data state */\nconst updateProductState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[PRODUCT_ROOT][PRODUCT_KEY];\n\n            dispatch({\n                type: PRODUCT_UPDATE,\n                payload: Object.assign(formData, obj)\n            })\n        } catch (error) {\n            Utils.log(\"Update Product State ===> error \", error);\n        }\n    }\n}\n\n/** Reset product data state */\nexport const resetProductState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            dispatch({\n                type: PRODUCT_RESET,\n                payload: {}\n            })\n        } catch (error) {\n            Utils.log(\"Update Product State ===> error \", error);\n        }\n    }\n}","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment';\n\nexport default class SelectCalendar extends PureComponent {\n    static propTypes = {\n        _id: PropTypes.string.isRequired,\n        placeholder: PropTypes.string.isRequired,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        type: PropTypes.string,\n        handleOnChange: PropTypes.func,\n        calendarOptions: PropTypes.object\n    }\n\n    static defaultProps = {\n        placeholder: \"Select date\"\n    }\n\n    componentDidMount = () => {\n        const { _id, value, handleOnChange, calendarOptions } = this.props;\n\n        var arrows;\n        if (window.KTUtil.isRTL()) {\n            arrows = {\n                leftArrow: '<i className=\"la la-angle-right\"></i>',\n                rightArrow: '<i className=\"la la-angle-left\"></i>'\n            }\n        } else {\n            arrows = {\n                leftArrow: '<i className=\"la la-angle-left\"></i>',\n                rightArrow: '<i className=\"la la-angle-right\"></i>'\n            }\n        }\n\n        window.$(`#${_id}`).datepicker(Object.assign(calendarOptions, {\n            templates: arrows\n        })).on(\"changeDate\", function (e) {\n            handleOnChange(new Date(e.date).getTime());\n        });\n\n        if (value) {\n            window.$(`#${_id}`).datepicker(\"setDate\", moment(value).format('MM/DD/YYYY'));\n        }\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { value, _id } = this.props;\n\n        if (value !== prevProps.value) {\n            if (value) {\n                window.$(`#${_id}`).datepicker(\"setDate\", moment(value).format('MM/DD/YYYY'));\n            }\n        }\n    }\n\n    render() {\n        const { _id, placeholder } = this.props;\n\n        return (\n            <input type=\"text\" className=\"form-control\" id={_id} readOnly placeholder={placeholder} />\n        )\n    }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport '../category/SelectCategory.css'\nimport { getAuthoriztionToken, getCategoriesWithSearch, refillGetCategoryViaId } from '../../../apis/APIs'\nimport { connect } from 'react-redux'\nimport { USER_KEY, USER_DATA, SUB_CATEGORY_FORM_CATEGORY_ID, STATUS, SUCCESS, CATEGORY_KEY, SUB_CATEGORY_REQUEST_STATUS, PRODUCT_KEY, ADD_PRODUCT_REQUEST_STATUS, SERVER_SUCCESS } from '../../../redux/Types'\nimport { updateAddProductFormData } from '../../../redux/product/Action'\n\nclass SelectCategory extends PureComponent {\n    static propTypes = {\n        _id: PropTypes.string.isRequired,\n        error_label: PropTypes.any,\n        label: PropTypes.string,\n        handleOnChangeCategory: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: {\n                id: undefined,\n                name: undefined\n            }\n        }\n    }\n\n    componentDidMount = () => {\n        this.init();\n    }\n\n    getCategoryData = () => {\n        const { category_id, type, user_token } = this.props;\n        const { value } = this.state;\n\n        if (type !== \"edit\" || !user_token || (value && value.name)) return;\n\n        refillGetCategoryViaId({\n            user_token,\n            category_id: category_id\n        })\n            .then((res) => {\n                if (res.message === SERVER_SUCCESS) {\n                    this.setState({\n                        value: res.data\n                    });\n                    this.init();\n                }\n            })\n            .catch((err) => {\n                this.init();\n            });\n    }\n\n    init = () => {\n        this.initSelectUI();\n    }\n\n    initSelectUI = function () {\n        const { user_token, handleOnChangeCategory, _id } = this.props;\n        let that = this;\n\n        if (!window.$) {\n            return;\n        }\n\n        // loading remote data\n        function formatRepo(repo) {\n            if (repo.loading) return repo.text;\n            var markup = \"<div className='select2-result-repository clearfix'>\" +\n                \"<div className='select2-result-repository__meta'>\" +\n                \"<div className='select2-result-repository__title'>\" + repo.name + \"</div>\";\n            return markup;\n        }\n\n        function formatRepoSelection(repo) {\n            const { value } = that.state;\n\n            repo._id && handleOnChangeCategory && handleOnChangeCategory(repo._id);\n            return repo.name || value.name || repo.text;\n        }\n\n        window.$(`#${_id}`).select2({\n            placeholder: \"Search for category\",\n            allowClear: true,\n            ajax: {\n                url: getCategoriesWithSearch(),\n                delay: 250,\n                headers: {\n                    \"Authorization\": getAuthoriztionToken()\n                },\n                data: function (params) {\n\n                    return {\n                        search: params.term ? params.term : '', // search term\n                        page: params.page ? params.page : 1,\n                        page_size: 10,\n                        user_token\n                    };\n                },\n                processResults: function (data, params) {\n                    params.page = params.page || 1;\n\n                    return {\n                        results: data && data.data && data.data.items && data.data.items.length ? data.data.items.map(ele => {\n                            if (ele._id) {\n                                ele.id = ele._id;\n                            }\n\n                            return ele;\n                        }) : [],\n                        pagination: {\n                            more: data && data.data && data.data.hasMore ? data.data.hasMore : false\n                        }\n                    };\n                },\n                cache: true\n            },\n            escapeMarkup: function (markup) {\n                return markup;\n            }, // let our custom formatter work\n            minimumInputLength: 1,\n            templateResult: formatRepo, // omitted for brevity, see the source of this page\n            templateSelection: formatRepoSelection // omitted for brevity, see the source of this page\n        });\n    }\n\n    resetCategorySelect = () => {\n        const { _id } = this.props;\n        window.$(`#${_id}`).val(null).trigger(\"change\");\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { addProductReqeustStatus, category_id } = this.props;\n\n        const prevAddProductReqeustStatus = prevProps && prevProps.addProductReqeustStatus ? prevProps.addProductReqeustStatus : {};\n        if (addProductReqeustStatus[STATUS] !== prevAddProductReqeustStatus[STATUS]) {\n            switch (addProductReqeustStatus[STATUS]) {\n                case SUCCESS:\n                    this.resetCategorySelect();\n                    break;\n            }\n        }\n\n        if (category_id !== prevProps.category_id) {\n            this.getCategoryData();\n        }\n    }\n\n    render() {\n        const { error_label, label, _id } = this.props;\n\n        return (\n            <div className=\"form-group row\" >\n                <label className=\"col-form-label col-lg-3 col-sm-12\">{label}</label>\n                <div className=\" col-lg-9 col-md-9 col-sm-12\" id=\"kt_select2_category_list_container\">\n                    <select className=\"form-control kt-select2\" id={_id} name=\"param\">\n                        <option></option>\n                    </select>\n                    {error_label}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ user, product }) => {\n    const user_data = user && user[USER_KEY] ? user[USER_KEY] : undefined;\n    const user_token = user_data && user_data[USER_DATA] && user_data[USER_DATA].user_token ? user_data[USER_DATA].user_token : false;\n\n    const product_data = product && product[PRODUCT_KEY] ? product[CATEGORY_KEY] : undefined;\n    const addProductReqeustStatus = product_data && product_data[ADD_PRODUCT_REQUEST_STATUS] ? product_data[ADD_PRODUCT_REQUEST_STATUS] : {};\n\n    return ({\n        user_token,\n        addProductReqeustStatus\n    });\n}\n\nexport default connect(mapToProps)(SelectCategory);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { UploadImage, SelectUploadFile } from '.'\nimport { connect } from 'react-redux'\nimport { PRODUCT_KEY, ADD_PRODUCT_FORM, ADD_PRODUCT_IMAGES, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_IS_UPLOADING_IMAGES } from '../../../redux/Types'\nimport { updateProductUIConstraints } from '../../../redux/product/Action'\nimport Utils from '../../util/Utils'\n\nclass UploadImageContainer extends PureComponent {\n    static propTypes = {\n        error_label: PropTypes.any\n    }\n\n    addImage = () => {\n\n        let selectImage = document.getElementById('select_product_image');\n        selectImage.click();\n\n        return;\n    }\n\n    onChangeFile = (e) => {\n        const { images, updateProductUIConstraints } = this.props;\n\n        let _images = images;\n        _images.push({\n            index: images && images.length ? images[images.length - 1].index + 1 : 0,\n            image: e.target.files[0]\n        });\n\n        updateProductUIConstraints({\n            [ADD_PRODUCT_IMAGES]: _images\n        });\n    }\n\n    render() {\n        const { images, error_label } = this.props;\n        Utils.log(\"images ===> container\", images);\n\n        return (\n            <div className=\"col-lg-9 col-xl-6\">\n                <SelectUploadFile\n                    _id={\"kt_contacts_add_avatar\"}\n                    addImage={this.addImage.bind(this)}\n                    onChangeFile={this.onChangeFile.bind(this)}\n                />\n                {\n                    images && images.length ?\n                        images.map(ele => {\n                            return <UploadImage _id={ele.index} key={ele.index} image={ele.image} />;\n                        })\n                        : < div />\n                }\n                {error_label}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const images = product_data && product_data[ADD_PRODUCT_IMAGES] ? product_data[ADD_PRODUCT_IMAGES] : [];\n\n    return ({\n        images,\n        length: images.length\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints\n})(UploadImageContainer);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { updateProductUIConstraints, updateAddProductFormData } from '../../../redux/product/Action';\nimport { ADD_PRODUCT_IMAGES, PRODUCT_KEY, ADD_PRODUCT_IS_UPLOADING_IMAGES, ADD_PRODUCT_FORM, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT } from '../../../redux/Types';\nimport { refillProductUploadFile } from '../../../apis/APIs';\nimport Utils from '../../util/Utils';\n\nclass UploadImage extends PureComponent {\n    static propTypes = {\n\n    }\n\n    state = {\n        isCancel: false,\n        image: '',\n        uploading: false,\n        is_success: false,\n        is_error: false\n    }\n\n    componentDidMount = () => {\n        this.init();\n    }\n\n    init = () => {\n        const { image } = this.props;\n\n        this.encodeImageFile(image);\n    }\n\n    submit = () => {\n        const { image, _id, updateProductUIConstraints, uploadedImages, images, updateAddProductFormData, image_uploading_count } = this.props;\n        const { is_success, uploading  } = this.state;\n\n        if (uploading) return;\n\n        if (is_success) {\n            return;\n        }\n\n        this.setState({ uploading: true, is_success: false, is_error: false });\n        refillProductUploadFile(image)\n            .then(data => {\n                this.setState({ uploading: false, is_success: true, is_error: false });\n\n                let _images = this.props.uploadedImages && this.props.uploadedImages.length ? this.props.uploadedImages : [];\n                _images.push({\n                    image: data.location\n                })\n\n                Utils.log(\"update on s3 bucket ===> \", _images);\n                updateAddProductFormData({\n                    [ADD_PRODUCT_FORM_UPLOADED_IMAGES]: _images\n                });\n                updateProductUIConstraints({\n                    [ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT]: this.props.image_uploading_count + 1\n                });\n            })\n            .catch(err => {\n                Utils.log(\"s3 upload image ===> error\", err);\n                this.setState({ uploading: false, is_success: false, is_error: true });\n                updateProductUIConstraints({\n                    [ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT]: this.props.image_uploading_count + 1\n                });\n            });\n    }\n\n    _handleCancel = () => {\n        const { updateProductUIConstraints, images, _id } = this.props;\n\n        this.setState({ isCancel: true });\n\n        let _images = images && images.length ? images : [];\n        let index = images.findIndex(ele => ele.index === _id);\n\n        if (index !== -1) _images.splice(index, 1);\n\n        updateProductUIConstraints({\n            [ADD_PRODUCT_IMAGES]: images\n        })\n    }\n\n    encodeImageFile(file) {\n        let reader = new FileReader();\n        let that = this;\n        reader.onloadend = function () {\n            that.setState({\n                image: reader.result\n            })\n        }\n        reader.readAsDataURL(file);\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { image_uploading } = this.props;\n\n        if (image_uploading !== prevProps.image_uploading) {\n            if (image_uploading) {\n                this.submit();\n            }\n        }\n    }\n\n    render() {\n        const { isCancel, image, uploading, is_success, is_error } = this.state;\n\n        if (isCancel) return null;\n\n        // url(/assets/img/plus.png)\n\n        return (\n            <div className=\"kt-avatar kt-avatar--outline m-2\" id=\"kt_contacts_add_avatar\">\n                <div className=\"kt-avatar__holder\" style={{ backgroundImage: `url(\"${image}\")` }}></div>\n                {\n                    is_success || uploading ?\n                        <div className=\"refill-sub-container-center\">\n                            <p style={{ color: \"#ffffff\", backgroundColor: 'rgba(0, 0, 0, 0.8)', paddingLeft: 10, paddingRight: 10 }}>{uploading ? \"Uploading...\" : \"Uploaded\"}</p>\n                        </div>\n                        : <span className=\"kt-avatar__cancel\" onClick={this._handleCancel.bind(this)} style={{ display: \"flex\" }} data-toggle=\"kt-tooltip\" title=\"\" data-original-title=\"Cancel avatar\">\n                            <i className=\"fa fa-times\"></i>\n                        </span>\n                }\n\n                {\n                    is_error ?\n                        <div className=\"refill-sub-container-center\">\n                            <p style={{ color: \"#ffffff\", backgroundColor: 'rgba(0, 0, 0, 0.8)', paddingLeft: 10, paddingRight: 10 }}>{\"Try again\"}</p>\n                        </div>\n                        : null\n                }\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const formData = product_data && product_data[ADD_PRODUCT_FORM] ? product_data[ADD_PRODUCT_FORM] : undefined;\n    const uploadedImages = formData && formData[ADD_PRODUCT_FORM_UPLOADED_IMAGES] ? formData[ADD_PRODUCT_FORM_UPLOADED_IMAGES] : [];\n\n    const images = product_data && product_data[ADD_PRODUCT_IMAGES] ? product_data[ADD_PRODUCT_IMAGES] : undefined;\n    const image_uploading = product_data && product_data[ADD_PRODUCT_IS_UPLOADING_IMAGES] ? product_data[ADD_PRODUCT_IS_UPLOADING_IMAGES] : false;\n    const image_uploading_count = product_data && product_data[ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT] ? product_data[ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT] : 0;\n\n    console.log(\"uploadedImages ===> image_uploading\", image_uploading);\n\n    return ({\n        images,\n        image_uploading,\n        uploadedImages,\n        length: images.length,\n        image_uploading_count,\n        uploadedImagesLength: uploadedImages.length\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints,\n    updateAddProductFormData\n})(UploadImage);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { UploadImage } from '.'\nimport { connect } from 'react-redux'\nimport { PRODUCT_KEY, ADD_PRODUCT_FORM, ADD_PRODUCT_IMAGES, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_IS_UPLOADING_IMAGES } from '../../../redux/Types'\nimport { updateProductUIConstraints } from '../../../redux/product/Action'\nimport Utils from '../../util/Utils'\n\nclass SelectUploadFile extends PureComponent {\n    static propTypes = {\n        _id: PropTypes.string,\n        onChangeFile: PropTypes.func,\n        addImage: PropTypes.func\n    }\n\n    render() {\n        const { uploading_image, onChangeFile, _id, addImage } = this.props;\n\n        if (uploading_image) return null;\n\n        return (\n            <div className=\"kt-avatar kt-avatar--outline m-2\" onClick={addImage} id={_id}>\n                <div className=\"kt-avatar__holder\">\n                    <input type=\"file\" hidden={true} accept=\"image/*\" id=\"select_product_image\" onChange={onChangeFile} />\n                </div>\n                <div className=\"refill-sub-container-center\">\n                    <img src=\"/assets/img/plus.png\" height=\"40\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const uploading_image = product_data && product_data[ADD_PRODUCT_IS_UPLOADING_IMAGES] ? product_data[ADD_PRODUCT_IS_UPLOADING_IMAGES] : false;\n\n    return ({\n        uploading_image\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints\n})(SelectUploadFile);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Table extends PureComponent {\n    static propTypes = {\n        table_id: PropTypes.string\n    }\n\n    render() {\n        const { table_id, exportCSVFileData, exportProductLoading } = this.props;\n\n        return (\n            <div className=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\n                <div className=\"kt-portlet kt-portlet--mobile\">\n                    <div className=\"kt-portlet__head kt-portlet__head--lg\">\n                        <div className=\"kt-portlet__head-label\">\n                            <span className=\"kt-portlet__head-icon\">\n                                <i className=\"kt-font-brand flaticon2-line-chart\"></i>\n                            </span>\n                            <h3 className=\"kt-portlet__head-title\">\n                                Products List\n\t\t\t\t\t\t\t\t\t\t\t\t</h3>\n                        </div>\n                        <div className=\"kt-portlet__head-toolbar\">\n                            <div className=\"kt-portlet__head-wrapper\">\n                                <div className=\"kt-portlet__head-actions\">\n                                    <div className=\"dropdown dropdown-inline\">\n                                        <button type=\"button\" className=\"btn btn-default btn-icon-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <i className=\"la la-download\"></i> Export\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n                                        <div className=\"dropdown-menu dropdown-menu-right\">\n                                            <ul className=\"kt-nav\">\n                                                <li className=\"kt-nav__section kt-nav__section--first\">\n                                                    <span className=\"kt-nav__section-text\">Choose an option</span>\n                                                </li>\n                                                <li className=\"kt-nav__item\">\n                                                    <a className=\"kt-nav__link refill_cursor\" onClick={exportProductLoading ? () => { } : exportCSVFileData}>\n                                                        <i className=\"kt-nav__link-icon la la-file-text-o\"></i>\n                                                        <span className=\"kt-nav__link-text\">{exportProductLoading ? \"Loading...\" : \"CSV\"}</span>\n                                                    </a>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"kt-portlet__body\">\n                        {/* <!--begin: Datatable --> */}\n                        <table className=\"table table-striped- table-bordered table-hover table-checkable\" id={table_id}>\n                            <thead>\n                                <tr>\n                                    <th>Order ID</th>\n                                    <th>Name</th>\n                                    <th>Created Date</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                        </table>\n\n                        {/* <!--end: Datatable --> */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n// <div className=\"kt-portlet__head kt-portlet__head--lg\">\n//     <div className=\"kt-portlet__head-label\">\n//         <span className=\"kt-portlet__head-icon\">\n//             <i className=\"kt-font-brand flaticon2-line-chart\"></i>\n//         </span>\n//         <h3 className=\"kt-portlet__head-title\">\n//             Category List\n// \t\t\t\t\t\t\t\t\t\t\t\t</h3>\n//     </div>\n//     <div className=\"kt-portlet__head-toolbar\">\n//         <div className=\"kt-portlet__head-wrapper\">\n//             <div className=\"kt-portlet__head-actions\">\n//                 <div className=\"dropdown dropdown-inline\">\n//                     <button type=\"button\" className=\"btn btn-default btn-icon-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n//                         <i className=\"la la-download\"></i> Export\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n//                     <div className=\"dropdown-menu dropdown-menu-right\">\n//                         <ul className=\"kt-nav\">\n//                             <li className=\"kt-nav__section kt-nav__section--first\">\n//                                 <span className=\"kt-nav__section-text\">Choose an option</span>\n//                             </li>\n//                             <li className=\"kt-nav__item\">\n//                                 <a href=\"#\" className=\"kt-nav__link\">\n//                                     <i className=\"kt-nav__link-icon la la-file-text-o\"></i>\n//                                     <span className=\"kt-nav__link-text\">CSV</span>\n//                                 </a>\n//                             </li>\n//                         </ul>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     </div>\n// </div>","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { UploadImage, SelectUploadFile, EditSelectUploadFile, EditUploadImage } from '.'\nimport { connect } from 'react-redux'\nimport { PRODUCT_KEY, ADD_PRODUCT_FORM, ADD_PRODUCT_IMAGES, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_IS_UPLOADING_IMAGES, EDIT_PRODUCT_IMAGES } from '../../../redux/Types'\nimport { updateProductUIConstraints } from '../../../redux/product/Action'\nimport Utils from '../../util/Utils'\n\nclass EditUploadImageContainer extends PureComponent {\n    static propTypes = {\n        error_label: PropTypes.any\n    }\n\n    addImage = () => {\n\n        let selectImage = document.getElementById('select_product_image');\n        selectImage.click();\n\n        return;\n    }\n\n    onChangeFile = (e) => {\n        const { images, updateProductUIConstraints } = this.props;\n\n        let _images = images;\n        _images.push({\n            index: images && images.length ? images[images.length - 1].index + 1 : 0,\n            image: e.target.files[0]\n        });\n\n        updateProductUIConstraints({\n            [EDIT_PRODUCT_IMAGES]: _images\n        });\n    }\n\n    render() {\n        const { images, error_label } = this.props;\n        Utils.log(\"images ===> container\", images);\n\n        return (\n            <div className=\"col-lg-9 col-xl-6\">\n                <EditSelectUploadFile\n                    _id={\"kt_contacts_edit_avatar\"}\n                    addImage={this.addImage.bind(this)}\n                    onChangeFile={this.onChangeFile.bind(this)}\n                />\n                {\n                    images && images.length ?\n                        images.map(ele => {\n                            return <EditUploadImage _id={ele.index} key={ele.index} image={ele.image} uploaded={ele.uploaded} />;\n                        })\n                        : < div />\n                }\n                {error_label}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const images = product_data && product_data[EDIT_PRODUCT_IMAGES] ? product_data[EDIT_PRODUCT_IMAGES] : [];\n\n    return ({\n        images,\n        length: images.length\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints\n})(EditUploadImageContainer);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { updateProductUIConstraints, updateEditProductFormData } from '../../../redux/product/Action';\nimport { ADD_PRODUCT_IMAGES, PRODUCT_KEY, ADD_PRODUCT_IS_UPLOADING_IMAGES, ADD_PRODUCT_FORM, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT, EDIT_PRODUCT_FORM, EDIT_PRODUCT_FORM_UPLOADED_IMAGES, EDIT_PRODUCT_IMAGES, EDIT_PRODUCT_IS_UPLOADING_IMAGES, EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT } from '../../../redux/Types';\nimport { refillProductUploadFile } from '../../../apis/APIs';\nimport Utils from '../../util/Utils';\n\nclass EditUploadImage extends PureComponent {\n    static propTypes = {\n\n    }\n\n    state = {\n        isCancel: false,\n        image: '',\n        uploading: false,\n        is_success: false,\n        is_error: false\n    }\n\n    componentDidMount = () => {\n        this.init();\n    }\n\n    init = () => {\n        const { image, uploaded } = this.props;\n\n        if (uploaded) {\n            this.setState({\n                image\n            });\n\n            return;\n        }\n\n        this.encodeImageFile(image);\n    }\n\n    submit = () => {\n        const { image, uploaded, _id, updateProductUIConstraints, uploadedImages, images, image_uploading_count, updateEditProductFormData } = this.props;\n        const { is_success, uploading } = this.state;\n\n        if (uploading) return;\n\n        if (is_success) {\n            return;\n        }\n\n        if (uploaded) {\n            this.setState({ uploading: false, is_success: true, is_error: false });\n\n            let _images = this.props.uploadedImages && this.props.uploadedImages.length ? this.props.uploadedImages : [];\n            _images.push({\n                image\n            })\n\n            Utils.log(\"update on s3 bucket ===> \", _images);\n            updateEditProductFormData({\n                [EDIT_PRODUCT_FORM_UPLOADED_IMAGES]: _images\n            });\n            updateProductUIConstraints({\n                [EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT]: this.props.image_uploading_count + 1\n            });\n\n            return;\n        }\n\n        this.setState({ uploading: true, is_success: false, is_error: false });\n        refillProductUploadFile(image)\n            .then(data => {\n                this.setState({ uploading: false, is_success: true, is_error: false });\n\n                let _images = this.props.uploadedImages && this.props.uploadedImages.length ? this.props.uploadedImages : [];\n                _images.push({\n                    image: data.location\n                })\n\n                Utils.log(\"update on s3 bucket ===> \", _images);\n                updateEditProductFormData({\n                    [EDIT_PRODUCT_FORM_UPLOADED_IMAGES]: _images\n                });\n                updateProductUIConstraints({\n                    [EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT]: this.props.image_uploading_count + 1\n                });\n            })\n            .catch(err => {\n                Utils.log(\"s3 upload image ===> error\", err);\n                this.setState({ uploading: false, is_success: false, is_error: true });\n                updateProductUIConstraints({\n                    [EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT]: this.props.image_uploading_count + 1\n                });\n            });\n    }\n\n    _handleCancel = () => {\n        const { updateProductUIConstraints, images, _id } = this.props;\n\n        this.setState({ isCancel: true });\n\n        let _images = images && images.length ? images : [];\n        let index = images.findIndex(ele => ele.index === _id);\n\n        if (index !== -1) _images.splice(index, 1);\n\n        updateProductUIConstraints({\n            [EDIT_PRODUCT_IMAGES]: images\n        })\n    }\n\n    encodeImageFile(file) {\n        let reader = new FileReader();\n        let that = this;\n        reader.onloadend = function () {\n            that.setState({\n                image: reader.result\n            })\n        }\n        reader.readAsDataURL(file);\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { image_uploading } = this.props;\n\n        if (image_uploading !== prevProps.image_uploading) {\n            if (image_uploading) {\n                this.submit();\n            }\n        }\n    }\n\n    render() {\n        const { isCancel, image, uploading, is_success, is_error } = this.state;\n\n        if (isCancel) return null;\n\n        // url(/assets/img/plus.png)\n\n        return (\n            <div className=\"kt-avatar kt-avatar--outline m-2\" id=\"kt_contacts_add_avatar\">\n                <div className=\"kt-avatar__holder\" style={{ backgroundImage: `url(\"${image}\")` }}></div>\n                {\n                    is_success || uploading ?\n                        <div className=\"refill-sub-container-center\">\n                            <p style={{ color: \"#ffffff\", backgroundColor: 'rgba(0, 0, 0, 0.8)', paddingLeft: 10, paddingRight: 10 }}>{uploading ? \"Uploading...\" : \"Uploaded\"}</p>\n                        </div>\n                        : <span className=\"kt-avatar__cancel\" onClick={this._handleCancel.bind(this)} style={{ display: \"flex\" }} data-toggle=\"kt-tooltip\" title=\"\" data-original-title=\"Cancel avatar\">\n                            <i className=\"fa fa-times\"></i>\n                        </span>\n                }\n\n                {\n                    is_error ?\n                        <div className=\"refill-sub-container-center\">\n                            <p style={{ color: \"#ffffff\", backgroundColor: 'rgba(0, 0, 0, 0.8)', paddingLeft: 10, paddingRight: 10 }}>{\"Try again\"}</p>\n                        </div>\n                        : null\n                }\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const formData = product_data && product_data[EDIT_PRODUCT_FORM] ? product_data[EDIT_PRODUCT_FORM] : undefined;\n    const uploadedImages = formData && formData[EDIT_PRODUCT_FORM_UPLOADED_IMAGES] ? formData[EDIT_PRODUCT_FORM_UPLOADED_IMAGES] : [];\n\n    const images = product_data && product_data[EDIT_PRODUCT_IMAGES] ? product_data[EDIT_PRODUCT_IMAGES] : undefined;\n    const image_uploading = product_data && product_data[EDIT_PRODUCT_IS_UPLOADING_IMAGES] ? product_data[EDIT_PRODUCT_IS_UPLOADING_IMAGES] : false;\n    const image_uploading_count = product_data && product_data[EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT] ? product_data[EDIT_PRODUCT_UPLOAD_TOTAL_IMAGES_COUNT] : 0;\n\n    console.log(\"uploadedImages ===> image_uploading\", image_uploading);\n\n    return ({\n        images,\n        image_uploading,\n        uploadedImages,\n        length: images.length,\n        image_uploading_count,\n        uploadedImagesLength: uploadedImages.length\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints,\n    updateEditProductFormData\n})(EditUploadImage);","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { UploadImage } from '.'\nimport { connect } from 'react-redux'\nimport { PRODUCT_KEY, ADD_PRODUCT_FORM, ADD_PRODUCT_IMAGES, ADD_PRODUCT_FORM_UPLOADED_IMAGES, ADD_PRODUCT_IS_UPLOADING_IMAGES, EDIT_PRODUCT_IS_UPLOADING_IMAGES } from '../../../redux/Types'\nimport { updateProductUIConstraints } from '../../../redux/product/Action'\nimport Utils from '../../util/Utils'\n\nclass EditSelectUploadFile extends PureComponent {\n    static propTypes = {\n        _id: PropTypes.string,\n        onChangeFile: PropTypes.func,\n        addImage: PropTypes.func\n    }\n\n    render() {\n        const { uploading_image, onChangeFile, _id, addImage } = this.props;\n\n        if (uploading_image) return null;\n\n        return (\n            <div className=\"kt-avatar kt-avatar--outline m-2\" onClick={addImage} id={_id}>\n                <div className=\"kt-avatar__holder\">\n                    <input type=\"file\" hidden={true} accept=\"image/*\" id=\"select_product_image\" onChange={onChangeFile} />\n                </div>\n                <div className=\"refill-sub-container-center\">\n                    <img src=\"/assets/img/plus.png\" height=\"40\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ product }) => {\n    const product_data = product && product[PRODUCT_KEY] ? product[PRODUCT_KEY] : undefined;\n\n    const uploading_image = product_data && product_data[EDIT_PRODUCT_IS_UPLOADING_IMAGES] ? product_data[EDIT_PRODUCT_IS_UPLOADING_IMAGES] : false;\n\n    return ({\n        uploading_image\n    });\n}\n\nexport default connect(mapToProps, {\n    updateProductUIConstraints\n})(EditSelectUploadFile);","import SelectCalendar from './SelectCalendar'\nimport SelectCategory from './SelectCategory'\nimport UploadImageContainer from './UploadImageContainer'\nimport UploadImage from './UploadImage'\nimport SelectUploadFile from './SelectUploadFile'\nimport ProductTable from './Table'\nimport EditUploadImageContainer from './EditUploadImageContainer'\nimport EditUploadImage from './EditUploadImage'\nimport EditSelectUploadFile from './EditSelectUploadFile'\n\nexport {\n    SelectCalendar,\n    SelectCategory,\n    UploadImageContainer,\n    UploadImage,\n    SelectUploadFile,\n    ProductTable,\n    EditUploadImageContainer,\n    EditUploadImage,\n    EditSelectUploadFile\n}"],"sourceRoot":""}