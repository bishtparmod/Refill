{"version":3,"sources":["redux/forgot_password/Action.js","pages/public/ForgotPassword.js"],"names":["updateUIConstraints","obj","dispatch","getState","formData","FORGOT_PASSWORD_ROOT","FORGOT_PASSWORD_KEY","data","Object","assign","updateForgotPasswordState","error","Utils","log","type","FORGOT_PASSWORD_UPDATE","payload","ForgotPassword","componentDidMount","init","updateSystemData","props","SYSTEM_DATA_PAGE_TITLE","submit","e","preventDefault","email","forgotPassword","loading","requestBody","Helper","validate","keys","then","status","response","FORGOT_PASSWORD_ERRORS","length","catch","err","console","isError","key","errors","findIndex","ele","fieldName","message","onChangeText","value","updateFormData","_openPage","url","history","push","componentDidUpdate","prevProps","reqeustStatus","prevReqeustStatus","navigation","STATUS","SUCCESS","ToastsStore","success","ERROR","MESSAGE","_handleErrorMessage","className","componentWillUnmount","resetLoginData","resetForgotState","this","id","style","backgroundImage","href","src","onSubmit","bind","placeholder","name","onChange","FORGOT_PASSWORD_FORM_EMAIL","target","autoComplete","PureComponent","connect","forgot_password","forgot_password_data","undefined","FORGOT_PASSWORD_FORM","FORGOT_PASSWORD_REQEUST_LOADING","FORGOT_PASSWORD_REQUEST_STATUS","EMPTY","body","refillForgotPassword","res","a","FORGOT_PASSWORD_RESET"],"mappings":"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","file":"static/js/16.9b0388f8.chunk.js","sourcesContent":["import { refillForgotPassword } from '../../apis/APIs'\nimport { FORGOT_PASSWORD_ROOT, FORGOT_PASSWORD_KEY, FORGOT_PASSWORD_FORM, FORGOT_PASSWORD_UPDATE, FORGOT_PASSWORD_REQUEST_STATUS, STATUS, EMPTY, MESSAGE, FORGOT_PASSWORD_REQEUST_LOADING, FORGOT_PASSWORD_FORM_EMAIL, SUCCESS, ERROR, FORGOT_PASSWORD_RESET } from \"../Types\";\nimport Utils from '../../components/util/Utils';\n\n/** Forgot Password */\nexport const forgotPassword = () => {\n    return (dispatch, getState) => {\n        try {\n            const forgotPasswordInfo = getState()[FORGOT_PASSWORD_ROOT][FORGOT_PASSWORD_KEY];\n            const formData = forgotPasswordInfo[FORGOT_PASSWORD_FORM];\n\n            //Intialize the request status and loading\n            dispatch(updateUIConstraints({\n                [FORGOT_PASSWORD_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [FORGOT_PASSWORD_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                \"email\": formData[FORGOT_PASSWORD_FORM_EMAIL]\n            }\n\n            refillForgotPassword(body).then(async (res) => {\n                Utils.log(\"Refill Forgot Passwrod Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateUIConstraints({\n                        [FORGOT_PASSWORD_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [FORGOT_PASSWORD_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateUIConstraints({\n                        [FORGOT_PASSWORD_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [FORGOT_PASSWORD_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Forgot Password ===> error\", error);\n                dispatch(updateUIConstraints({\n                    [FORGOT_PASSWORD_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [FORGOT_PASSWORD_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Update Forgot Password Form Data ===> error \", error);\n            dispatch(updateUIConstraints({\n                [FORGOT_PASSWORD_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [FORGOT_PASSWORD_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n\n/** Manage Form Data */\nexport const updateFormData = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[FORGOT_PASSWORD_ROOT][FORGOT_PASSWORD_KEY];\n            const data = Object.assign(formData[FORGOT_PASSWORD_FORM], obj);\n\n            dispatch(updateForgotPasswordState(Object.assign(formData, {\n                [FORGOT_PASSWORD_FORM]: data\n            })));\n        } catch (error) {\n            Utils.log(\"Update Form Data ===> error \", error);\n        }\n    }\n}\n\n/** Manage UI Constraints */\nexport const updateUIConstraints = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[FORGOT_PASSWORD_ROOT][FORGOT_PASSWORD_KEY];\n            const data = Object.assign(formData, obj);\n\n            dispatch(updateForgotPasswordState(data));\n        } catch (error) {\n            Utils.log(\"Update UI Constraints ===> error \", error);\n        }\n    }\n}\n\n/** Update forgot password data state */\nconst updateForgotPasswordState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[FORGOT_PASSWORD_ROOT][FORGOT_PASSWORD_KEY];\n\n            dispatch({\n                type: FORGOT_PASSWORD_UPDATE,\n                payload: Object.assign(formData, obj)\n            })\n        } catch (error) {\n            Utils.log(\"Update Login State ===> error \", error);\n        }\n    }\n}\n\n/** Reset forgot data state */\nexport const resetForgotState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            dispatch({\n                type: FORGOT_PASSWORD_RESET,\n                payload: {}\n            })\n        } catch (error) {\n            Utils.log(\"Update Forgot State ===> error \", error);\n        }\n    }\n}","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { LOGIN_KEY, LOGIN_FORM, LOGIN_FORM_EMAIL, LOGIN_FORM_PASSWORD, LOGIN_ERRORS, SUCCESS, ERROR, STATUS, LOGIN_REQEUST_LOADING, LOGIN_REQUEST_STATUS, FORGOT_PASSWORD_KEY, FORGOT_PASSWORD_FORM, FORGOT_PASSWORD_FORM_EMAIL, FORGOT_PASSWORD_ERRORS, FORGOT_PASSWORD_REQEUST_LOADING, FORGOT_PASSWORD_REQUEST_STATUS, SYSTEM_DATA_PAGE_TITLE, MESSAGE } from '../../redux/Types';\nimport { Helper } from '../../apis'\nimport { updateFormData, updateUIConstraints, forgotPassword, resetForgotState } from '../../redux/forgot_password/Action';\nimport Utils from '../../components/util/Utils';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport { updateSystemData } from '../../redux/system/Action';\n\nclass ForgotPassword extends PureComponent {\n    static propTypes = {\n\n    }\n\n    componentDidMount = () => {\n        this.init();\n    }\n\n    init = () => {\n        const { updateSystemData } = this.props;\n\n        updateSystemData({\n            [SYSTEM_DATA_PAGE_TITLE]: \"Refill | Forgot Password\"\n        });\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n\n        const { email, updateUIConstraints, forgotPassword, loading } = this.props;\n        if (loading) return;\n\n        const requestBody = { email };\n\n        Helper.validate(Object.keys(requestBody), requestBody)\n            .then(({ status, response }) => {\n                if (status) {\n                    updateUIConstraints({\n                        [FORGOT_PASSWORD_ERRORS]: []\n                    });\n\n                    forgotPassword();\n                } else updateUIConstraints({\n                    [FORGOT_PASSWORD_ERRORS]: response && response.length ? response : []\n                });\n            }).catch(err => console.log(err));\n    }\n\n    /** On error */\n    isError = (key) => {\n        const { errors } = this.props;\n\n        if (errors && errors.length) {\n            return errors.findIndex(ele => (ele.fieldName === key)) > -1 ? { status: true, message: errors[errors.findIndex(ele => (ele.fieldName === key))].message } : { status: false, message: \"\" };\n        } else return { status: false, message: \"\" }\n    }\n\n    onChangeText = (key, value) => {\n        const { updateFormData } = this.props;\n\n        updateFormData({\n            [key]: value\n        });\n    }\n\n    _openPage = (url) => {\n        const { history } = this.props;\n\n        if (!url) return;\n\n        history.push(url);\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { reqeustStatus, loading, navigation } = this.props;\n\n        const prevReqeustStatus = prevProps && prevProps.reqeustStatus ? prevProps.reqeustStatus : {};\n        if (reqeustStatus[STATUS] !== prevReqeustStatus[STATUS]) {\n            switch (reqeustStatus[STATUS]) {\n                case SUCCESS:\n                    ToastsStore.success(\"Your new password has been sent to your email address.\");\n                    this._openPage('/login');\n                    break;\n                case ERROR:\n                    const status = reqeustStatus[MESSAGE] && reqeustStatus[MESSAGE].status ? reqeustStatus[MESSAGE].status : 500;\n                    switch (status) {\n                        case 404:\n                            ToastsStore.error(\"User email is not present.\");\n                            break;\n                        default:\n                            ToastsStore.error(\"Internal server error\");\n                    }\n                    break;\n            }\n        }\n    }\n\n    _handleErrorMessage = (key) => {\n        const data = this.isError(key);\n\n        if (data && data.status) return <p className=\"text-right text-error\">{data.message}</p>;\n\n        return <div />\n    }\n\n    componentWillUnmount = () => {\n        this.resetLoginData();\n    }\n\n    resetLoginData = () => {\n        const { resetForgotState } = this.props;\n\n        resetForgotState();\n    }\n\n    render() {\n        const { email, loading } = this.props;\n\n        return (\n            <div className=\"kt-page-content-white kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--fixed kt-page--loading\">\n                {/* begin:: Page */}\n                <div className=\"kt-grid kt-grid--ver kt-grid--root kt-page height-100\">\n                    <div className=\"kt-grid kt-grid--hor kt-grid--root  kt-login kt-login--v3 kt-login--signin\" id=\"kt_login\">\n                        <div className=\"kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor\" style={{ backgroundImage: 'url(assets/media//bg/bg-3.jpg)' }}>\n                            <div className=\"kt-grid__item kt-grid__item--fluid kt-login__wrapper\">\n                                <div className=\"kt-login__container\">\n                                    <div className=\"kt-login__logo\">\n                                        <a href=\"#\">\n                                            <img src=\"/small-logo.png\" />\n                                        </a>\n                                    </div>\n                                    <div className=\"kt-login__signin\">\n                                        <div className=\"kt-login__head\">\n                                            <h3 className=\"kt-login__title\">Forgot Password</h3>\n                                        </div>\n                                        <form className=\"kt-form\" onSubmit={this.submit.bind(this)}>\n                                            <div className=\"input-group\">\n                                                <input className=\"form-control\" type=\"text\" placeholder=\"Email\" name=\"email\" onChange={(e) => this.onChangeText(FORGOT_PASSWORD_FORM_EMAIL, e.target.value)} autoComplete=\"off\" value={email} />\n                                            </div>\n                                            {/* display error */}\n                                            {this._handleErrorMessage(\"email\")}\n                                            <div className=\"kt-login__actions\">\n                                                <button type=\"submit\" id=\"kt_login_signin_submit\" className=\"btn btn-brand btn-elevate kt-login__btn-primary\">{ loading ? \"Loading...\" : \"Submit\"}</button>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* end:: Page */}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ forgot_password }) => {\n    const forgot_password_data = forgot_password && forgot_password[FORGOT_PASSWORD_KEY] ? forgot_password[FORGOT_PASSWORD_KEY] : undefined;\n    const formData = forgot_password_data && forgot_password_data[FORGOT_PASSWORD_FORM] ? forgot_password_data[FORGOT_PASSWORD_FORM] : undefined;\n    const email = formData && formData[FORGOT_PASSWORD_FORM_EMAIL] ? formData[FORGOT_PASSWORD_FORM_EMAIL] : undefined;\n    const errors = forgot_password_data && forgot_password_data[FORGOT_PASSWORD_ERRORS] ? forgot_password_data[FORGOT_PASSWORD_ERRORS] : [];\n    const loading = forgot_password_data && forgot_password_data[FORGOT_PASSWORD_REQEUST_LOADING] ? forgot_password_data[FORGOT_PASSWORD_REQEUST_LOADING] : false;\n    const reqeustStatus = forgot_password_data && forgot_password_data[FORGOT_PASSWORD_REQUEST_STATUS] ? forgot_password_data[FORGOT_PASSWORD_REQUEST_STATUS] : {};\n\n    console.log(\"errors ===> forgot password\", errors);\n\n    return ({\n        email,\n        errors,\n        loading,\n        reqeustStatus\n    });\n}\n\nexport default connect(mapToProps, {\n    updateFormData,\n    updateUIConstraints,\n    updateSystemData,\n    forgotPassword,\n    resetForgotState\n})(ForgotPassword);"],"sourceRoot":""}