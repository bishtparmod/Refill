{"version":3,"sources":["redux/reset_password/Action.js","redux/header/Action.js","redux/footer/Action.js","pages/dashboard/settings/ResetPassword.js"],"names":["updateUIConstraints","obj","dispatch","getState","formData","RESET_PASSWORD_ROOT","RESET_PASSWORD_KEY","data","Object","assign","updateResetPasswordState","error","Utils","log","type","RESET_PASSWORD_UPDATE","payload","updateHeaderState","HEADER_ROOT","HEADER_KEY","HEADER_UPDATE","updateFooterState","FOOTER_ROOT","FOOTER_KEY","FOOTER_UPDATE","ResetPassword","props","componentDidMount","is_reset_password","DEACTIVE","_replacePage","url","history","replace","componentWillUnmount","showHeaderAndSidebar","resetData","hideHeaderAndSidebar","updateSidebarUIConstraints","updateHeaderUIConstraints","updateFooterUIConstraints","SIDEBAR_IS_SHOW","HEADER_IS_SHOW","FOOTER_IS_SHOW","submit","e","preventDefault","password","confirm_password","resetPassword","loading","requestBody","Helper","validate","keys","then","status","response","RESET_PASSWORD_ERRORS","length","catch","err","console","isError","key","errors","findIndex","ele","fieldName","message","onChangeText","value","updateFormData","componentDidUpdate","prevProps","reqeustStatus","sessionLogin","navigation","alert","prevReqeustStatus","STATUS","SUCCESS","ToastsStore","success","ERROR","MESSAGE","SERVER_NO_VALUE","TOKEN_NOT_FOUND","_handleErrorMessage","className","resetResetDataState","this","id","onSubmit","bind","role","data-dismiss","aria-label","aria-hidden","name","onChange","RESET_PASSWORD_FORM_PASSWORD","target","placeholder","RESET_PASSWORD_FORM_CONFIRM_PASSWORD","PureComponent","connect","reset_password","user","reset_password_data","undefined","RESET_PASSWORD_FORM","RESET_PASSWORD_REQEUST_LOADING","RESET_PASSWORD_REQUEST_STATUS","user_data","USER_KEY","USER_DATA","USER_ROOT","user_token","EMPTY","body","refillResetPassword","res","a","RESET_PASSWORD_RESET"],"mappings":"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","file":"static/js/14.cfdf44db.chunk.js","sourcesContent":["import { gcsLogin, refillResetPassword } from '../../apis/APIs'\nimport Utils from '../../components/util/Utils';\nimport { RESET_PASSWORD_ROOT, RESET_PASSWORD_KEY, RESET_PASSWORD_FORM, RESET_PASSWORD_UPDATE, USER_ROOT, USER_KEY, USER_DATA, RESET_PASSWORD_REQUEST_STATUS, EMPTY, STATUS, MESSAGE, TOKEN_NOT_FOUND, RESET_PASSWORD_REQEUST_LOADING, RESET_PASSWORD_FORM_PASSWORD, RESET_PASSWORD_FORM_CONFIRM_PASSWORD, SUCCESS, ERROR, FORGOT_PASSWORD_RESET, RESET_PASSWORD_RESET } from '../Types';\n\n/** Reset Password */\nexport const resetPassword = () => {\n    return (dispatch, getState) => {\n        try {\n            //Form Data\n            const reset_password_data = getState()[RESET_PASSWORD_ROOT][RESET_PASSWORD_KEY];\n            const formData = reset_password_data[RESET_PASSWORD_FORM];\n\n            //User data\n            const data = getState()[USER_ROOT][USER_KEY];\n            const user_token = data && data[USER_DATA] && data[USER_DATA].user_token ? data[USER_DATA].user_token : undefined;\n\n            if (!user_token) {\n                dispatch(updateUIConstraints({\n                    [RESET_PASSWORD_REQUEST_STATUS]: {\n                        [STATUS]: EMPTY,\n                        [MESSAGE]: {\n                            message: TOKEN_NOT_FOUND\n                        }\n                    },\n                    [RESET_PASSWORD_REQEUST_LOADING]: false\n                }));\n                return;\n            }\n\n            //Intialize the request status and loading\n            dispatch(updateUIConstraints({\n                [RESET_PASSWORD_REQUEST_STATUS]: {\n                    [STATUS]: EMPTY,\n                    [MESSAGE]: \"\"\n                },\n                [RESET_PASSWORD_REQEUST_LOADING]: true\n            }));\n\n            const body = {\n                \"user_token\": user_token,\n                \"password\": formData[RESET_PASSWORD_FORM_PASSWORD],\n                \"confirm_password\": formData[RESET_PASSWORD_FORM_CONFIRM_PASSWORD]\n            }\n\n            console.log(\"reset password body ===> user_token\", body);\n\n            refillResetPassword(body).then(async (res) => {\n                Utils.log(\"Refill Reset Password Response ===> \", res);\n\n                if (res && res.status === 200) {\n                    dispatch(updateUIConstraints({\n                        [RESET_PASSWORD_REQUEST_STATUS]: {\n                            [STATUS]: SUCCESS,\n                            [MESSAGE]: res\n                        },\n                        [RESET_PASSWORD_REQEUST_LOADING]: false\n                    }));\n                } else {\n                    dispatch(updateUIConstraints({\n                        [RESET_PASSWORD_REQUEST_STATUS]: {\n                            [STATUS]: ERROR,\n                            [MESSAGE]: res\n                        },\n                        [RESET_PASSWORD_REQEUST_LOADING]: false\n                    }));\n                }\n            }).catch(error => {\n                Utils.log(\"Refill Reset Password ===> error\", error);\n                dispatch(updateUIConstraints({\n                    [RESET_PASSWORD_REQUEST_STATUS]: {\n                        [STATUS]: ERROR,\n                        [MESSAGE]: \"\"\n                    },\n                    [RESET_PASSWORD_REQEUST_LOADING]: false\n                }));\n            });\n        } catch (error) {\n            Utils.log(\"Refill Reset Password ===> error\", error);\n            dispatch(updateUIConstraints({\n                [RESET_PASSWORD_REQUEST_STATUS]: {\n                    [STATUS]: ERROR,\n                    [MESSAGE]: \"\"\n                },\n                [RESET_PASSWORD_REQEUST_LOADING]: false\n            }));\n        }\n    }\n}\n\n/** Manage Form Data */\nexport const updateFormData = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[RESET_PASSWORD_ROOT][RESET_PASSWORD_KEY];\n            const data = Object.assign(formData[RESET_PASSWORD_FORM], obj);\n\n            dispatch(updateResetPasswordState(Object.assign(formData, {\n                [RESET_PASSWORD_FORM]: data\n            })));\n        } catch (error) {\n            Utils.log(\"Update Form Data ===> error \", error);\n        }\n    }\n}\n\n/** Manage UI Constraints */\nexport const updateUIConstraints = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[RESET_PASSWORD_ROOT][RESET_PASSWORD_KEY];\n            const data = Object.assign(formData, obj);\n\n            dispatch(updateResetPasswordState(data));\n        } catch (error) {\n            Utils.log(\"Update UI Constraints ===> error \", error);\n        }\n    }\n}\n\n/** Update rest password data state */\nconst updateResetPasswordState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[RESET_PASSWORD_ROOT][RESET_PASSWORD_KEY];\n\n            dispatch({\n                type: RESET_PASSWORD_UPDATE,\n                payload: Object.assign(formData, obj)\n            })\n        } catch (error) {\n            Utils.log(\"Update Login State ===> error \", error);\n        }\n    }\n}\n\n/** Reset reset data state */\nexport const resetResetDataState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            dispatch({\n                type: RESET_PASSWORD_RESET,\n                payload: {}\n            })\n        } catch (error) {\n            Utils.log(\"Update Forgot State ===> error \", error);\n        }\n    }\n}","import Utils from '../../components/util/Utils';\nimport { HEADER_ROOT, HEADER_KEY, HEADER_UPDATE } from '../Types';\n\n/** Manage Header UI Constraints */\nexport const updateHeaderUIConstraints = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[HEADER_ROOT][HEADER_KEY];\n            const data = Object.assign(formData, obj);\n\n            dispatch(updateHeaderState(data));\n        } catch (error) {\n            Utils.log(\"Update Header UI Constraints ===> error \", error);\n        }\n    }\n}\n\n/** Update Header data state */\nconst updateHeaderState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[HEADER_ROOT][HEADER_KEY];\n\n            dispatch({\n                type: HEADER_UPDATE,\n                payload: Object.assign(formData, obj)\n            })\n        } catch (error) {\n            Utils.log(\"Update Header State ===> error \", error);\n        }\n    }\n}","import Utils from '../../components/util/Utils';\nimport { FOOTER_ROOT, FOOTER_KEY, FOOTER_UPDATE } from '../Types';\n\n/** Manage Footer UI Constraints */\nexport const updateFooterUIConstraints = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[FOOTER_ROOT][FOOTER_KEY];\n            const data = Object.assign(formData, obj);\n\n            dispatch(updateFooterState(data));\n        } catch (error) {\n            Utils.log(\"Update Footer UI Constraints ===> error \", error);\n        }\n    }\n}\n\n/** Update Footer data state */\nconst updateFooterState = (obj) => {\n    return (dispatch, getState) => {\n        try {\n            const formData = getState()[FOOTER_ROOT][FOOTER_KEY];\n\n            dispatch({\n                type: FOOTER_UPDATE,\n                payload: Object.assign(formData, obj)\n            })\n        } catch (error) {\n            Utils.log(\"Update Footer State ===> error \", error);\n        }\n    }\n}","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { updateFormData, updateUIConstraints, resetPassword, resetResetDataState } from '../../../redux/reset_password/Action';\nimport { Helper } from '../../../apis'\nimport Utils from '../../../components/util/Utils';\nimport { RESET_PASSWORD_KEY, RESET_PASSWORD_FORM, RESET_PASSWORD_ERRORS, RESET_PASSWORD_REQEUST_LOADING, RESET_PASSWORD_REQUEST_STATUS, RESET_PASSWORD_FORM_PASSWORD, RESET_PASSWORD_FORM_CONFIRM_PASSWORD, STATUS, SUCCESS, ERROR, HEADER_IS_SHOW, SIDEBAR_IS_SHOW, FOOTER_IS_SHOW, USER_KEY, USER_DATA, DEACTIVE, MESSAGE, SERVER_NO_VALUE, TOKEN_NOT_FOUND } from '../../../redux/Types';\nimport { updateSidebarUIConstraints } from '../../../redux/sidebar/Action';\nimport { updateHeaderUIConstraints } from '../../../redux/header/Action';\nimport { updateFooterUIConstraints } from '../../../redux/footer/Action';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport { sessionLogin } from '../../../redux/login/Action';\n\nclass ResetPassword extends PureComponent {\n    static propTypes = {\n\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.hideHeaderAndSidebar();\n    }\n\n    componentDidMount = () => {\n        const { is_reset_password } = this.props;\n\n        if (is_reset_password === DEACTIVE) this._replacePage('/');\n    }\n\n    _replacePage = (url) => {\n        const { history } = this.props;\n\n        if (!url) return;\n\n        history.replace(url);\n    }\n\n    componentWillUnmount = () => {\n        this.showHeaderAndSidebar();\n        this.resetData();\n    }\n\n    hideHeaderAndSidebar = () => {\n        const { updateSidebarUIConstraints, updateHeaderUIConstraints, updateFooterUIConstraints } = this.props;\n\n        updateSidebarUIConstraints({\n            [SIDEBAR_IS_SHOW]: true\n        });\n        updateHeaderUIConstraints({\n            [HEADER_IS_SHOW]: true\n        });\n        updateFooterUIConstraints({\n            [FOOTER_IS_SHOW]: true\n        });\n    }\n\n    showHeaderAndSidebar = () => {\n        const { updateSidebarUIConstraints, updateHeaderUIConstraints, updateFooterUIConstraints } = this.props;\n\n        updateSidebarUIConstraints({\n            [SIDEBAR_IS_SHOW]: false\n        });\n        updateHeaderUIConstraints({\n            [HEADER_IS_SHOW]: false\n        });\n        updateFooterUIConstraints({\n            [FOOTER_IS_SHOW]: false\n        });\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n\n        const { password, confirm_password, updateUIConstraints, resetPassword, loading } = this.props;\n        if (loading) return;\n\n        const requestBody = {\n            password,\n            confirm_password\n        };\n\n        Helper.validate(Object.keys(requestBody), requestBody)\n            .then(({ status, response }) => {\n                if (status) {\n                    updateUIConstraints({\n                        [RESET_PASSWORD_ERRORS]: []\n                    });\n\n                    resetPassword();\n                } else updateUIConstraints({\n                    [RESET_PASSWORD_ERRORS]: response && response.length ? response : []\n                });\n            }).catch(err => console.log(err));\n    }\n\n    /** On error */\n    isError = (key) => {\n        const { errors } = this.props;\n\n        if (errors && errors.length) {\n            return errors.findIndex(ele => (ele.fieldName === key)) > -1 ? { status: true, message: errors[errors.findIndex(ele => (ele.fieldName === key))].message } : { status: false, message: \"\" };\n        } else return { status: false, message: \"\" }\n    }\n\n    onChangeText = (key, value) => {\n        const { updateFormData } = this.props;\n\n        updateFormData({\n            [key]: value\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { reqeustStatus, loading, navigation, sessionLogin } = this.props;\n        const { is_reset_password } = this.props;\n\n        if (is_reset_password !== prevProps.is_reset_password) {\n            alert(\"reset password\" + is_reset_password);\n            if (is_reset_password === DEACTIVE) this._replacePage('/');\n        }\n\n        const prevReqeustStatus = prevProps && prevProps.reqeustStatus ? prevProps.reqeustStatus : {};\n        if (reqeustStatus[STATUS] !== prevReqeustStatus[STATUS]) {\n            switch (reqeustStatus[STATUS]) {\n                case SUCCESS:\n                    ToastsStore.success(\"Password changed successfully.\");\n                    sessionLogin();\n                    break;\n                case ERROR:\n                    const message = reqeustStatus[MESSAGE] && reqeustStatus[MESSAGE].message ? reqeustStatus[MESSAGE].message : null;\n\n                    switch (message) {\n                        case SERVER_NO_VALUE:\n                            ToastsStore.error(\"No Record Found.\");\n                            break;\n                        case TOKEN_NOT_FOUND:\n                            ToastsStore.error(\"User token is not available.\");\n                            break;\n                    }\n\n                    break;\n            }\n        }\n    }\n\n    _handleErrorMessage = (key) => {\n        const data = this.isError(key);\n\n        if (data && data.status) return <span className=\"form-text text-right text-error\">{data.message}</span>;\n\n        return <div />\n    }\n\n    resetData = () => {\n        const { resetResetDataState } = this.props;\n\n        resetResetDataState();\n    }\n\n    render() {\n        const { loading } = this.props;\n\n        return (\n            <div className=\"kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor\" id=\"kt_content\">\n\n                {/* <!-- begin:: Content --> */}\n                <div className=\"kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid\">\n\n                    {/* <!--begin::Portlet--> */}\n                    <div className=\"row\">\n                        <div className=\"offset-lg-2 col-lg-8\">\n\n                            {/* <!--begin::Portlet--> */}\n                            <div className=\"kt-portlet\">\n                                <div className=\"kt-portlet__head\">\n                                    <div className=\"kt-portlet__head-label\">\n                                        <h3 className=\"kt-portlet__head-title\">\n                                            Reset Password\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h3>\n                                    </div>\n                                </div>\n\n                                {/* <!--begin::Form--> */}\n                                <form className=\"kt-form kt-form--label-right\" id=\"kt_form_1\" onSubmit={this.submit.bind(this)}>\n                                    <div className=\"kt-portlet__body\">\n                                        <div className=\"form-group form-group-last kt-hide\">\n                                            <div className=\"alert alert-danger\" role=\"alert\" id=\"kt_form_1_msg\">\n                                                <div className=\"alert-icon\"><i className=\"flaticon-warning\"></i></div>\n                                                <div className=\"alert-text\">\n                                                    Oh snap! Change a few things up and try submitting again.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n                                                <div className=\"alert-close\">\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\"><i className=\"la la-close\"></i></span>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-form-label col-lg-3 col-sm-12\">New Password *</label>\n                                            <div className=\"col-lg-9 col-md-9 col-sm-12\">\n                                                <input type=\"password\" className=\"form-control\" name=\"password\" onChange={(e) => this.onChangeText(RESET_PASSWORD_FORM_PASSWORD, e.target.value)} placeholder=\"Enter new password\" />\n                                                {/* display error */}\n                                                {this._handleErrorMessage(\"password\")}\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-form-label col-lg-3 col-sm-12\">Confirm Password *</label>\n                                            <div className=\"col-lg-9 col-md-9 col-sm-12\">\n                                                <input type=\"password\" className=\"form-control\" name=\"confirm_password\" onChange={(e) => this.onChangeText(RESET_PASSWORD_FORM_CONFIRM_PASSWORD, e.target.value)} placeholder=\"Enter confirm password\" />\n                                                {/* display error */}\n                                                {this._handleErrorMessage(\"confirm_password\")}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"kt-portlet__foot\">\n                                        <div className=\"kt-form__actions\">\n                                            <div className=\"row\">\n                                                <div className=\"col-lg-9 ml-lg-auto\">\n                                                    <button type=\"submit\" className=\"btn btn-brand\">{loading ? \"Loading...\" : \"Submit\"}</button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n\n                                {/* <!--end::Form--> */}\n                            </div>\n\n                            {/* <!--end::Portlet--> */}\n                        </div>\n\n                    </div>\n                </div>\n\n                {/* <!-- end:: Content --> */}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = ({ reset_password, user }) => {\n    const reset_password_data = reset_password && reset_password[RESET_PASSWORD_KEY] ? reset_password[RESET_PASSWORD_KEY] : undefined;\n    const formData = reset_password_data && reset_password_data[RESET_PASSWORD_FORM] ? reset_password_data[RESET_PASSWORD_FORM] : undefined;\n    const password = formData && formData[RESET_PASSWORD_FORM_PASSWORD] ? formData[RESET_PASSWORD_FORM_PASSWORD] : undefined;\n    const confirm_password = formData && formData[RESET_PASSWORD_FORM_CONFIRM_PASSWORD] ? formData[RESET_PASSWORD_FORM_CONFIRM_PASSWORD] : undefined;\n    const errors = reset_password_data && reset_password_data[RESET_PASSWORD_ERRORS] ? reset_password_data[RESET_PASSWORD_ERRORS] : [];\n    const loading = reset_password_data && reset_password_data[RESET_PASSWORD_REQEUST_LOADING] ? reset_password_data[RESET_PASSWORD_REQEUST_LOADING] : false;\n    const reqeustStatus = reset_password_data && reset_password_data[RESET_PASSWORD_REQUEST_STATUS] ? reset_password_data[RESET_PASSWORD_REQUEST_STATUS] : {};\n    const user_data = user && user[USER_KEY] ? user[USER_KEY] : undefined;\n    const is_reset_password = user_data && user_data[USER_DATA] && user_data[USER_DATA].reset_password ? user_data[USER_DATA].reset_password : 0;\n\n    console.log(\"errors ===> forgot password\", errors);\n\n    return ({\n        password,\n        confirm_password,\n        errors,\n        loading,\n        reqeustStatus,\n        is_reset_password\n    });\n}\n\nexport default connect(mapToProps, {\n    updateFormData,\n    updateUIConstraints,\n    updateSidebarUIConstraints,\n    updateHeaderUIConstraints,\n    updateFooterUIConstraints,\n    sessionLogin,\n    resetPassword,\n    resetResetDataState\n})(ResetPassword);"],"sourceRoot":""}